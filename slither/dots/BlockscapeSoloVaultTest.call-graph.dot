strict digraph {
subgraph cluster_7114_StdUtils {
label = "StdUtils"
"7114_bytesToUint" [label="bytesToUint"]
"7114_addressFromLast20Bytes" [label="addressFromLast20Bytes"]
"7114__bound" [label="_bound"]
"7114_computeCreateAddress" [label="computeCreateAddress"]
"7114_bound" [label="bound"]
"7114_hashInitCode" [label="hashInitCode"]
"7114_getTokenBalances" [label="getTokenBalances"]
"7114_computeCreate2Address" [label="computeCreate2Address"]
"7114_console2_log" [label="console2_log"]
"7114_computeCreate2Address" -> "7114_addressFromLast20Bytes"
"7114_computeCreateAddress" -> "7114_addressFromLast20Bytes"
"7114_computeCreate2Address" -> "7114_computeCreate2Address"
"7114_hashInitCode" -> "7114_hashInitCode"
"7114_bound" -> "7114__bound"
"7114_bound" -> "7114_console2_log"
}subgraph cluster_33395_HelperContract {
label = "HelperContract"
"33395__unstakeRPL" [label="_unstakeRPL"]
"33395__depositToRocketpool" [label="_depositToRocketpool"]
"33395__warpTimeToDeposit" [label="_warpTimeToDeposit"]
"33395__testContractSetupAfterStaking" [label="_testContractSetupAfterStaking"]
"33395__stakeRPL" [label="_stakeRPL"]
"33395__warpTimeAfterRPLStake" [label="_warpTimeAfterRPLStake"]
"33395__testInitContractSetup" [label="_testInitContractSetup"]
"33395__warpAfterStakingCooldown" [label="_warpAfterStakingCooldown"]
"33395__testInitRocketPoolSetup" [label="_testInitRocketPoolSetup"]
"33395__openVaultDepositAndTestInitSetup" [label="_openVaultDepositAndTestInitSetup"]
"33395__testRocketPoolSetupAfterStaking" [label="_testRocketPoolSetupAfterStaking"]
"33395__openValidatorNFT" [label="_openValidatorNFT"]
"33395__depositSoloStaker" [label="_depositSoloStaker"]
"33395__setupParticipants" [label="_setupParticipants"]
"33395__testInitRocketPoolSetup" -> "33395_assertEq"
"33395__openVaultDepositAndTestInitSetup" -> "33395__openValidatorNFT"
"33395__testInitContractSetup" -> "33395_assertEq"
"33395__openVaultDepositAndTestInitSetup" -> "33395_assertEq"
"33395__depositToRocketpool" -> "33395__warpTimeToDeposit"
"33395__testRocketPoolSetupAfterStaking" -> "33395_assertEq"
"33395__testContractSetupAfterStaking" -> "33395_assertEq"
"33395__stakeRPL" -> "33395__warpTimeAfterRPLStake"
"33395__openVaultDepositAndTestInitSetup" -> "33395__testInitRocketPoolSetup"
"33395__openVaultDepositAndTestInitSetup" -> "33395__testInitContractSetup"
"33395__openVaultDepositAndTestInitSetup" -> "33395__depositSoloStaker"
}subgraph cluster_2006_StdChains {
label = "StdChains"
"2006__toUpper" [label="_toUpper"]
"2006_setChain" [label="setChain"]
"2006_setChainWithDefaultRpcUrl" [label="setChainWithDefaultRpcUrl"]
"2006_getChainWithUpdatedRpcUrl" [label="getChainWithUpdatedRpcUrl"]
"2006_getChain" [label="getChain"]
"2006_initialize" [label="initialize"]
"2006_setChain" -> "2006_setChain"
"2006_setChain" -> "2006_initialize"
"2006_initialize" -> "2006_setChainWithDefaultRpcUrl"
"2006_getChain" -> "2006_getChainWithUpdatedRpcUrl"
"2006_getChain" -> "2006_initialize"
"2006_getChainWithUpdatedRpcUrl" -> "2006__toUpper"
"2006_setChainWithDefaultRpcUrl" -> "2006_setChain"
}subgraph cluster_29721_DSTest {
label = "DSTest"
"29721_assertLe" [label="assertLe"]
"29721_failed" [label="failed"]
"29721_assertGt" [label="assertGt"]
"29721_assertGe" [label="assertGe"]
"29721_assertEq0" [label="assertEq0"]
"29721_assertGeDecimal" [label="assertGeDecimal"]
"29721_fail" [label="fail"]
"29721_assertEqDecimal" [label="assertEqDecimal"]
"29721_assertLtDecimal" [label="assertLtDecimal"]
"29721_assertEq" [label="assertEq"]
"29721_checkEq0" [label="checkEq0"]
"29721_assertGtDecimal" [label="assertGtDecimal"]
"29721_assertLt" [label="assertLt"]
"29721_assertTrue" [label="assertTrue"]
"29721_assertEq32" [label="assertEq32"]
"29721_assertLeDecimal" [label="assertLeDecimal"]
"29721_hasHEVMContext" [label="hasHEVMContext"]
"29721_assertTrue" -> "29721_fail"
"29721_assertEq" -> "29721_fail"
"29721_assertLe" -> "29721_assertLe"
"29721_assertGeDecimal" -> "29721_fail"
"29721_assertLeDecimal" -> "29721_assertLeDecimal"
"29721_assertGtDecimal" -> "29721_fail"
"29721_assertLt" -> "29721_assertLt"
"29721_assertEq0" -> "29721_fail"
"29721_assertGt" -> "29721_fail"
"29721_assertTrue" -> "29721_assertTrue"
"29721_assertGt" -> "29721_assertGt"
"29721_assertLt" -> "29721_fail"
"29721_assertLtDecimal" -> "29721_assertLtDecimal"
"29721_assertLeDecimal" -> "29721_assertGeDecimal"
"29721_assertGe" -> "29721_assertGe"
"29721_failed" -> "29721_hasHEVMContext"
"29721_assertGeDecimal" -> "29721_assertGeDecimal"
"29721_assertLtDecimal" -> "29721_fail"
"29721_assertGtDecimal" -> "29721_assertGtDecimal"
"29721_fail" -> "29721_hasHEVMContext"
"29721_assertEq0" -> "29721_checkEq0"
"29721_assertEq" -> "29721_assertEq"
"29721_assertLe" -> "29721_fail"
"29721_assertEq0" -> "29721_assertEq0"
"29721_assertEq32" -> "29721_assertEq"
"29721_assertEqDecimal" -> "29721_assertEqDecimal"
"29721_assertLeDecimal" -> "29721_fail"
"29721_assertEqDecimal" -> "29721_fail"
"29721_assertGe" -> "29721_fail"
}subgraph cluster_3578_StdCheatsSafe {
label = "StdCheatsSafe"
"3578_assumeNoPrecompiles" [label="assumeNoPrecompiles"]
"3578__bytesToUint" [label="_bytesToUint"]
"3578_isFork" [label="isFork"]
"3578_rawToConvertedEIP1559Detail" [label="rawToConvertedEIP1559Detail"]
"3578_rawToConvertedEIPTx1559s" [label="rawToConvertedEIPTx1559s"]
"3578_readReceipts" [label="readReceipts"]
"3578_rawToConvertedReceipts" [label="rawToConvertedReceipts"]
"3578_makeAddrAndKey" [label="makeAddrAndKey"]
"3578_rawToConvertedReceipt" [label="rawToConvertedReceipt"]
"3578_rawToConvertedEIPTx1559" [label="rawToConvertedEIPTx1559"]
"3578_deployCode" [label="deployCode"]
"3578_readEIP1559ScriptArtifact" [label="readEIP1559ScriptArtifact"]
"3578_assumePayable" [label="assumePayable"]
"3578_readReceipt" [label="readReceipt"]
"3578_deriveRememberKey" [label="deriveRememberKey"]
"3578_makeAddr" [label="makeAddr"]
"3578_rawToConvertedReceiptLogs" [label="rawToConvertedReceiptLogs"]
"3578_readTx1559" [label="readTx1559"]
"3578_readTx1559s" [label="readTx1559s"]
"3578_readTx1559" -> "3578_rawToConvertedEIPTx1559"
"3578_assumeNoPrecompiles" -> "3578_assumeNoPrecompiles"
"3578_readTx1559s" -> "3578_rawToConvertedEIPTx1559s"
"3578_rawToConvertedReceiptLogs" -> "3578__bytesToUint"
"3578_rawToConvertedReceipt" -> "3578_rawToConvertedReceiptLogs"
"3578_rawToConvertedEIP1559Detail" -> "3578__bytesToUint"
"3578_makeAddr" -> "3578_makeAddrAndKey"
"3578_rawToConvertedEIPTx1559" -> "3578_rawToConvertedEIP1559Detail"
"3578_rawToConvertedReceipt" -> "3578__bytesToUint"
"3578_rawToConvertedReceipts" -> "3578_rawToConvertedReceipt"
"3578_readEIP1559ScriptArtifact" -> "3578_rawToConvertedEIPTx1559s"
"3578_readReceipt" -> "3578_rawToConvertedReceipt"
"3578_readReceipts" -> "3578_rawToConvertedReceipts"
"3578_readEIP1559ScriptArtifact" -> "3578_rawToConvertedReceipts"
"3578_rawToConvertedEIPTx1559s" -> "3578_rawToConvertedEIPTx1559"
}subgraph cluster_32860_BlockscapeValidatorNFTTest {
label = "BlockscapeValidatorNFTTest"
"32860_testCloseValidatorNFT" [label="testCloseValidatorNFT"]
"32860_testDepositWithdrawalMulti" [label="testDepositWithdrawalMulti"]
"32860_testUpdateValidator" [label="testUpdateValidator"]
"32860_testOpenValidatorNFT" [label="testOpenValidatorNFT"]
"32860_testDepositValidatorNFT" [label="testDepositValidatorNFT"]
"32860_testWithdraw" [label="testWithdraw"]
"32860_testSetWithdrawFee" [label="testSetWithdrawFee"]
"32860_testWithdrawBatch" [label="testWithdrawBatch"]
"32860_testChangeETHLimit" [label="testChangeETHLimit"]
"32860_testFallbacks" [label="testFallbacks"]
"32860_setUp" [label="setUp"]
"32860_testSetBlockscapeRocketPoolNode" [label="testSetBlockscapeRocketPoolNode"]
"32860_slitherConstructorConstantVariables" [label="slitherConstructorConstantVariables"]
"32860_slitherConstructorVariables" [label="slitherConstructorVariables"]
"32860_testUserRequestWithdraw" [label="testUserRequestWithdraw"]
"32860_testDepositWithdrawalMulti" -> "32860__openValidatorNFT"
"32860_testWithdrawBatch" -> "32860__depositSoloStaker"
"32860_testWithdraw" -> "32860_assertEq"
"32860_testCloseValidatorNFT" -> "32860__openValidatorNFT"
"32860_testUpdateValidator" -> "32860_assertEq"
"32860_testDepositWithdrawalMulti" -> "32860__stakeRPL"
"32860_testOpenValidatorNFT" -> "32860_assertEq"
"32860_testWithdraw" -> "32860__depositSoloStaker"
"32860_testCloseValidatorNFT" -> "32860__testInitRocketPoolSetup"
"32860_testDepositValidatorNFT" -> "32860__stakeRPL"
"32860_testUpdateValidator" -> "32860__openValidatorNFT"
"32860_testWithdrawBatch" -> "32860_assertEq"
"32860_testCloseValidatorNFT" -> "32860__stakeRPL"
"32860_testChangeETHLimit" -> "32860_assertEq"
"32860_testCloseValidatorNFT" -> "32860__testInitContractSetup"
"32860_testDepositWithdrawalMulti" -> "32860__unstakeRPL"
"32860_testDepositWithdrawalMulti" -> "32860__depositSoloStaker"
"32860_testWithdraw" -> "32860__stakeRPL"
"32860_testUserRequestWithdraw" -> "32860_assertEq"
"32860_testUpdateValidator" -> "32860__stakeRPL"
"32860_testOpenValidatorNFT" -> "32860__testRocketPoolSetupAfterStaking"
"32860_testWithdrawBatch" -> "32860__openValidatorNFT"
"32860_testDepositWithdrawalMulti" -> "32860__warpAfterStakingCooldown"
"32860_testCloseValidatorNFT" -> "32860_assertEq"
"32860_testUserRequestWithdraw" -> "32860__stakeRPL"
"32860_testDepositWithdrawalMulti" -> "32860_assertEq"
"32860_testUpdateValidator" -> "32860__depositSoloStaker"
"32860_testOpenValidatorNFT" -> "32860__testInitContractSetup"
"32860_setUp" -> "32860__setupParticipants"
"32860_testOpenValidatorNFT" -> "32860__stakeRPL"
"32860_testDepositValidatorNFT" -> "32860__depositSoloStaker"
"32860_testDepositValidatorNFT" -> "32860__openValidatorNFT"
"32860_testWithdrawBatch" -> "32860__stakeRPL"
"32860_testOpenValidatorNFT" -> "32860__testInitRocketPoolSetup"
"32860_testWithdraw" -> "32860__openValidatorNFT"
"32860_testUserRequestWithdraw" -> "32860__depositSoloStaker"
"32860_testDepositValidatorNFT" -> "32860_assertEq"
"32860_testOpenValidatorNFT" -> "32860__openValidatorNFT"
"32860_testOpenValidatorNFT" -> "32860__testContractSetupAfterStaking"
"32860_testUserRequestWithdraw" -> "32860__openValidatorNFT"
}subgraph cluster_1342_StdAssertions {
label = "StdAssertions"
"1342_assertEq" [label="assertEq"]
"1342_assertApproxEqRelDecimal" [label="assertApproxEqRelDecimal"]
"1342_assertApproxEqRel" [label="assertApproxEqRel"]
"1342_assertApproxEqAbs" [label="assertApproxEqAbs"]
"1342_assertFalse" [label="assertFalse"]
"1342_assertEqUint" [label="assertEqUint"]
"1342_fail" [label="fail"]
"1342_assertApproxEqAbsDecimal" [label="assertApproxEqAbsDecimal"]
"1342_fail" -> "1342_fail"
"1342_assertEq" -> "1342_assertEq0"
"1342_assertApproxEqAbs" -> "1342_assertApproxEqAbs"
"1342_assertApproxEqAbsDecimal" -> "1342_assertApproxEqAbsDecimal"
"1342_assertApproxEqRel" -> "1342_fail"
"1342_assertFalse" -> "1342_assertTrue"
"1342_assertEq" -> "1342_fail"
"1342_assertApproxEqAbsDecimal" -> "1342_fail"
"1342_assertApproxEqAbs" -> "1342_fail"
"1342_assertApproxEqRel" -> "1342_assertEq"
"1342_assertApproxEqRelDecimal" -> "1342_assertApproxEqRelDecimal"
"1342_assertEqUint" -> "1342_assertEq"
"1342_assertApproxEqRel" -> "1342_assertApproxEqRel"
"1342_assertEq" -> "1342_assertEq"
"1342_assertApproxEqRelDecimal" -> "1342_fail"
"1342_assertApproxEqRelDecimal" -> "1342_assertEq"
}subgraph cluster_3967_StdCheats {
label = "StdCheats"
"3967_rewind" [label="rewind"]
"3967_deal" [label="deal"]
"3967_startHoax" [label="startHoax"]
"3967_hoax" [label="hoax"]
"3967_skip" [label="skip"]
"3967_changePrank" [label="changePrank"]
"3967_deal" -> "3967_deal"
}subgraph cluster_solidity {
label = "[Solidity]"
"mload(uint256)" 
"require(bool,string)" 
"abi.encodePacked()" 
"abi.decode()" 
"abi.encodeWithSignature()" 
"abi.encode()" 
"keccak256(bytes)" 
"abi.encodeWithSelector()" 
"create(uint256,uint256,uint256)" 
"revert(uint256,uint256)" 
"balance(address)" 
"chainid()" 
"3578_readTx1559" -> "abi.decode()"
"3578_readReceipt" -> "abi.encodePacked()"
"7114_hashInitCode" -> "abi.encodePacked()"
"3578_readReceipt" -> "abi.decode()"
"32860_testUpdateValidator" -> "abi.encodePacked()"
"29721_failed" -> "abi.decode()"
"3578__bytesToUint" -> "require(bool,string)"
"1342_assertEq" -> "keccak256(bytes)"
"29721_assertEq" -> "keccak256(bytes)"
"32860_slitherConstructorVariables" -> "keccak256(bytes)"
"7114__bound" -> "require(bool,string)"
"7114_computeCreateAddress" -> "abi.encodePacked()"
"29721_assertEq" -> "abi.encodePacked()"
"29721_failed" -> "abi.encodePacked()"
"2006_setChain" -> "abi.encodePacked()"
"2006_setChain" -> "require(bool,string)"
"2006_getChain" -> "abi.encodePacked()"
"2006_getChainWithUpdatedRpcUrl" -> "keccak256(bytes)"
"3967_deal" -> "abi.decode()"
"32860_testWithdraw" -> "balance(address)"
"3578_makeAddrAndKey" -> "keccak256(bytes)"
"3967_deal" -> "abi.encodeWithSelector()"
"29721_failed" -> "abi.encode()"
"29721_fail" -> "abi.encodePacked()"
"7114_computeCreateAddress" -> "keccak256(bytes)"
"7114_bytesToUint" -> "abi.decode()"
"7114_hashInitCode" -> "keccak256(bytes)"
"2006_getChainWithUpdatedRpcUrl" -> "abi.encodePacked()"
"3578__bytesToUint" -> "abi.decode()"
"2006_setChain" -> "keccak256(bytes)"
"3578_readTx1559s" -> "abi.decode()"
"3578_readEIP1559ScriptArtifact" -> "abi.decode()"
"7114_computeCreate2Address" -> "keccak256(bytes)"
"3578_readTx1559" -> "abi.encodePacked()"
"7114_bytesToUint" -> "require(bool,string)"
"3578_deployCode" -> "create(uint256,uint256,uint256)"
"7114_console2_log" -> "abi.encodeWithSignature()"
"2006_getChain" -> "require(bool,string)"
"3578_deployCode" -> "abi.encodePacked()"
"3578_deployCode" -> "mload(uint256)"
"2006_getChainWithUpdatedRpcUrl" -> "mload(uint256)"
"7114_computeCreate2Address" -> "abi.encodePacked()"
"3578_assumeNoPrecompiles" -> "chainid()"
"32860_slitherConstructorVariables" -> "abi.encodePacked()"
"3578_readReceipts" -> "abi.decode()"
"29721_fail" -> "keccak256(bytes)"
"7114_getTokenBalances" -> "require(bool,string)"
"2006_getChainWithUpdatedRpcUrl" -> "abi.encodeWithSignature()"
"32860_slitherConstructorConstantVariables" -> "keccak256(bytes)"
"3578__bytesToUint" -> "abi.encodePacked()"
"1342_assertEq" -> "abi.encode()"
"7114_bound" -> "require(bool,string)"
"7114_getTokenBalances" -> "abi.decode()"
"7114_getTokenBalances" -> "abi.encodeWithSelector()"
"2006_getChainWithUpdatedRpcUrl" -> "revert(uint256,uint256)"
"3578_deployCode" -> "require(bool,string)"
"7114_bytesToUint" -> "abi.encodePacked()"
"3578_makeAddrAndKey" -> "abi.encodePacked()"
"29721_fail" -> "abi.encode()"
"29721_failed" -> "keccak256(bytes)"
}
}