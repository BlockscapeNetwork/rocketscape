{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughRPLStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_vali",
          "type": "bytes"
        }
      ],
      "name": "ValidatorAlreadySet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "ETHLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_availRPL",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requiredRPL",
          "type": "uint256"
        }
      ],
      "name": "RPLStakeRequired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "RocketPoolNodeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakedETH",
          "type": "uint256"
        }
      ],
      "name": "UserRequestedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_vali",
          "type": "bytes"
        }
      ],
      "name": "ValidatorSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "changeETHLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeSoloVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableRPLStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEthLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakedETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "institution",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "institutionName",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "institutionVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct BlockscapeSoloVaultGoerli.Metadata",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReqRPLStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasNodeEnoughRPLStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVaultOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openSoloVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBlockscapeRocketPoolNode",
          "type": "address"
        }
      ],
      "name": "setBlockscapeRocketPoolNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryDepositSoloVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryWithdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_vali",
          "type": "bytes"
        }
      ],
      "name": "updateValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "userRequestWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "viewUserRequestWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x600680546001600160a01b03191673f0d22db91de516b44e5c976f71e394c9ac97e6451790556801158e460913d0000060075567de0b6b3a764000006008556009805460ff19169055610190600a556f636f6e74726163742e6164647265737360801b60a090815270726f636b65744e6f64655374616b696e6760781b60b0526021608081905260c1604081905291206321f8a72160e01b90915260c55273d8cd47263414afeca62d6e2a3917d6600abdceb36321f8a72160e5602060405180830381865afa158015620000d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fd9190620001d6565b600b80546001600160a01b03929092166001600160a01b03199283168117909155600c80549092161790553480156200013557600080fd5b506040518060a00160405280606d815260200162003b23606d91396200015b8162000172565b5060016004556200016c3362000184565b62000379565b6002620001808282620002ad565b5050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620001e957600080fd5b81516001600160a01b03811681146200020157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200023357607f821691505b6020821081036200025457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a857600081815260208120601f850160051c81016020861015620002835750805b601f850160051c820191505b81811015620002a4578281556001016200028f565b5050505b505050565b81516001600160401b03811115620002c957620002c962000208565b620002e181620002da84546200021e565b846200025a565b602080601f831160018114620003195760008415620003005750858301515b600019600386901b1c1916600185901b178555620002a4565b600085815260208120601f198616915b828110156200034a5788860151825594840194600190910190840162000329565b5085821015620003695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61379a80620003896000396000f3fe60806040526004361061024e5760003560e01c80638776d1d711610138578063bd85b039116100b0578063f242432a1161007f578063f649b01411610064578063f649b014146106e9578063f6b76685146106fe578063f9d7afd71461071e57600080fd5b8063f242432a146106a9578063f2fde38b146106c957600080fd5b8063bd85b039146105f9578063e8a3d48514610626578063e985e9c51461063b578063ec36d35e1461069157600080fd5b80639fe8d3aa11610107578063a574cea4116100ec578063a574cea41461058b578063b1251026146105b9578063b6ac642a146105d957600080fd5b80639fe8d3aa14610556578063a22cb4651461056b57600080fd5b80638776d1d7146104985780638d8b7ca9146104b85780638da5cb5b146104d857806395d89b411461050d57600080fd5b8063354228be116101cb57806366f9fa3a1161019a5780636ea5ba1a1161017f5780636ea5ba1a1461045b57806370a383e01461047b578063715018a61461048357600080fd5b806366f9fa3a146104315780636ba367a31461044657600080fd5b8063354228be146103ab5780634e1273f4146103c05780634f558e79146103ed57806363b613f21461041c57600080fd5b80630e89341c1161022257806318160ddd1161020757806318160ddd146103545780632e1a7d4d146103695780632eb2c2d61461038b57600080fd5b80630e89341c1461032157806312065fe01461034157600080fd5b8062fdd58e1461025357806301ffc9a71461028657806302943854146102b657806306fdde03146102cb575b600080fd5b34801561025f57600080fd5b5061027361026e366004612ab1565b610733565b6040519081526020015b60405180910390f35b34801561029257600080fd5b506102a66102a1366004612b09565b610813565b604051901515815260200161027d565b3480156102c257600080fd5b506102736108f6565b3480156102d757600080fd5b506103146040518060400160405280601a81526020017f426c6f636b736361706520536f6c6f205661756c74204e46547300000000000081525081565b60405161027d9190612b9b565b34801561032d57600080fd5b5061031461033c366004612bae565b610a50565b34801561034d57600080fd5b5047610273565b34801561036057600080fd5b50610273610a81565b34801561037557600080fd5b50610389610384366004612bae565b610b99565b005b34801561039757600080fd5b506103896103a6366004612d68565b610bec565b3480156103b757600080fd5b50600854610273565b3480156103cc57600080fd5b506103e06103db366004612e12565b610cb5565b60405161027d9190612f18565b3480156103f957600080fd5b506102a6610408366004612bae565b600090815260036020526040902054151590565b34801561042857600080fd5b50610389610e0d565b34801561043d57600080fd5b506102a6610e1c565b34801561045257600080fd5b50600a54610273565b34801561046757600080fd5b50610273610476366004612bae565b610f87565b610389611003565b34801561048f57600080fd5b5061038961110a565b3480156104a457600080fd5b506102736104b3366004612bae565b61111c565b3480156104c457600080fd5b506103896104d3366004612f2b565b6111a6565b3480156104e457600080fd5b5060055460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027d565b34801561051957600080fd5b506103146040518060400160405280600381526020017f425356000000000000000000000000000000000000000000000000000000000081525081565b34801561056257600080fd5b5061027361132e565b34801561057757600080fd5b50610389610586366004612f68565b6113c8565b34801561059757600080fd5b506105ab6105a6366004612bae565b6113d3565b60405161027d929190612fa4565b3480156105c557600080fd5b506103896105d4366004612bae565b6114f6565b3480156105e557600080fd5b506103896105f4366004612bae565b61153a565b34801561060557600080fd5b50610273610614366004612bae565b60009081526003602052604090205490565b34801561063257600080fd5b50610314611547565b34801561064757600080fd5b506102a6610656366004612ff2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561069d57600080fd5b5060095460ff166102a6565b3480156106b557600080fd5b506103896106c4366004613025565b611567565b3480156106d557600080fd5b506103896106e436600461308a565b611629565b3480156106f557600080fd5b506103896116e0565b34801561070a57600080fd5b5061038961071936600461308a565b6116f5565b34801561072a57600080fd5b50610389611770565b600073ffffffffffffffffffffffffffffffffffffffff83166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806108a657507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061080d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461080d565b600c546006546040517f90f7ff4c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839216906390f7ff4c90602401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906130a5565b9050806000036109a257600091505090565b600c546006546040517f03fa87b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906303fa87b490602401602060405180830381865afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906130a5565b9050610a4982826130ed565b9250505090565b6060610a5b8261178c565b604051602001610a6b9190613128565b6040516020818303038152906040529050919050565b60008060015b3073ffffffffffffffffffffffffffffffffffffffff16636ba367a36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af691906130a5565b8111610b93576040517fbd85b03900000000000000000000000000000000000000000000000000000000815260048101829052309063bd85b03990602401602060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7591906130a5565b610b7f9083613206565b915080610b8b81613219565b915050610a87565b50919050565b610ba161184a565b60055460405173ffffffffffffffffffffffffffffffffffffffff9091169082156108fc029083906000818181858888f19350505050158015610be8573d6000803e3d6000fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff8516331480610c155750610c158533610656565b610ca1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016107d4565b610cae85858585856118cb565b5050505050565b60608151835114610d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016107d4565b6000835167ffffffffffffffff811115610d6457610d64612bc7565b604051908082528060200260200182016040528015610d8d578160200160208202803683370190505b50905060005b8451811015610e0557610dd8858281518110610db157610db1613251565b6020026020010151858381518110610dcb57610dcb613251565b6020026020010151610733565b828281518110610dea57610dea613251565b6020908102919091010152610dfe81613219565b9050610d93565b509392505050565b610e1561184a565b6000600955565b600c546006546040517f90f7ff4c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839216906390f7ff4c90602401602060405180830381865afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb691906130a5565b905080600003610ec857600091505090565b600c546006546040517f9961cee400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000929190911690639961cee490602401602060405180830381865afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6391906130a5565b90506000610f6f6108f6565b90506000610f7d8284613280565b1015935050505090565b600080610f938361111c565b90506001610fa13385610733565b1061080d576000838152600d60209081526040918290205482518681523392810192909252818301849052606082015290517f57e8bc4c74baca16ab16c5cc83fa0bc416b230ea2a49969e56a6fe1b5ea5a8639181900360800190a192915050565b61100b611c13565b60095460ff16611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5661756c7420697320636c6f736564000000000000000000000000000000000060448201526064016107d4565b34156110df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e73756666696369656e74204554480000000000000000000000000000000060448201526064016107d4565b6110eb34600a54611c86565b600a805460010190556110fe6000600955565b6111086001600455565b565b61111261184a565b6111086000611d73565b600754600090600161112e3385610733565b1061080d5760006301e1338060075461114791906130ed565b6000858152600d6020526040812060010154919250906111679042613280565b90506301d52bd08110611184576706f05b59d3b20000925061119e565b61118e8183613293565b60075461119b9190613280565b92505b505092915050565b6111ae61184a565b61126260405180602001604052806000815250600e600085815260200190815260200160002080546111df906132d0565b80601f016020809104026020016040519081016040528092919081815260200182805461120b906132d0565b80156112585780601f1061122d57610100808354040283529160200191611258565b820191906000526020600020905b81548152906001019060200180831161123b57829003601f168201915b5050505050611dea565b6112a8576000828152600e60205260409081902090517f47b41d480000000000000000000000000000000000000000000000000000000081526107d4919060040161331d565b6000828152600e602052604090206112c08282613411565b506112c9610e1c565b156112d657610be8611770565b60006112e061132e565b905060006112ec6108f6565b60408051848152602081018390529192507f6cac971587f3485cf88026d10806eb012734ef89e176a8317db787673df0bc86910160405180910390a150505050565b600c546006546040517f9961cee400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009283921690639961cee490602401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d91906130a5565b610be8338383611e43565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000828152600d60209081526040808320600e835292819020815160a08101835284548152600185015493810193909352600284015460ff9081161515928401929092526003840154606084810191909152600490940154909116151560808301528054819061146d906132d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611499906132d0565b80156114e65780601f106114bb576101008083540402835291602001916114e6565b820191906000526020600020905b8154815290600101906020018083116114c957829003601f168201915b5050505050905091509150915091565b6114fe61184a565b60088190556040518181527ff5ef0716d925ac1ef70d8b610f013c7fd7cd03f9120fb486f0c4f18b4ef6f5c5906020015b60405180910390a150565b61154261184a565b600755565b606060405180608001604052806053815260200161371260539139905090565b73ffffffffffffffffffffffffffffffffffffffff851633148061159057506115908533610656565b61161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016107d4565b610cae8585858585611f96565b61163161184a565b73ffffffffffffffffffffffffffffffffffffffff81166116d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107d4565b6116dd81611d73565b50565b6116e861184a565b6009541561110857600080fd5b6116fd61184a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f234e4926e7311948b723292a80f6b0aa228047bf0ef59c361707c3e91e0e33a29060200161152f565b61177861184a565b6009541561178557600080fd5b6001600955565b60606000611799836121e2565b600101905060008167ffffffffffffffff8111156117b9576117b9612bc7565b6040519080825280601f01601f1916602001820160405280156117e3576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846117ed57509392505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611108576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d4565b815183511461195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166119ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016107d4565b33611a0e8187878787876122c4565b60005b8451811015611b7e576000858281518110611a2e57611a2e613251565b602002602001015190506000858381518110611a4c57611a4c613251565b6020908102919091018101516000848152808352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015611b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016107d4565b60008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b16825281208054849290611b63908490613206565b9250508190555050505080611b7790613219565b9050611a11565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bf592919061352b565b60405180910390a4611c0b81878787878761248f565b505050505050565b600260045403611c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107d4565b6002600455565b6040805160a08101825260006020808301829052828401829052606083018290526080830182905285835283518082018552828152858352600e9091529290209091611cd29082613411565b5042816020018181525050611cf93383600160405180602001604052806000815250612719565b6000918252600d602090815260409283902082518155908201516001820155918101516002830180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0092831617905560608201516003840155608090910151600490920180549215159290911691909117905550565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611dfd9190613559565b6040516020818303038152906040528051906020012083604051602001611e249190613559565b6040516020818303038152906040528051906020012014905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416612039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016107d4565b33600061204585612890565b9050600061205285612890565b90506120628389898585896122c4565b60008681526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016107d4565b60008781526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a1682528120805488929061216a908490613206565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121d7848a8a8a8a8a6128db565b505050505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061222b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612257576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061227557662386f26fc10000830492506010015b6305f5e100831061228d576305f5e100830492506008015b61271083106122a157612710830492506004015b606483106122b3576064830492506002015b600a831061080d5760010192915050565b73ffffffffffffffffffffffffffffffffffffffff85166123585760005b8351811015612356578281815181106122fd576122fd613251565b60200260200101516003600086848151811061231b5761231b613251565b6020026020010151815260200190815260200160002060008282546123409190613206565b9091555061234f905081613219565b90506122e2565b505b73ffffffffffffffffffffffffffffffffffffffff8416611c0b5760005b835181101561248657600084828151811061239357612393613251565b6020026020010151905060008483815181106123b1576123b1613251565b6020026020010151905060006003600084815260200190815260200160002054905081811015612463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016107d4565b6000928352600360205260409092209103905561247f81613219565b9050612376565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15611c0b576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c81906125069089908990889088908890600401613575565b6020604051808303816000875af192505050801561255f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261255c918101906135e0565b60015b6126485761256b6135fd565b806308c379a0036125be575061257f613619565b8061258a57506125c0565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d49190612b9b565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016107d4565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014612486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166127bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107d4565b3360006127c885612890565b905060006127d585612890565b90506127e6836000898585896122c4565b60008681526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915281208054879290612823908490613206565b9091555050604080518781526020810187905273ffffffffffffffffffffffffffffffffffffffff808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612486836000898989896128db565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128ca576128ca613251565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15611c0b576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061295290899089908890889088906004016136c1565b6020604051808303816000875af19250505080156129ab575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526129a8918101906135e0565b60015b6129b75761256b6135fd565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014612486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016107d4565b803573ffffffffffffffffffffffffffffffffffffffff81168114612aac57600080fd5b919050565b60008060408385031215612ac457600080fd5b612acd83612a88565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146116dd57600080fd5b600060208284031215612b1b57600080fd5b8135612b2681612adb565b9392505050565b60005b83811015612b48578181015183820152602001612b30565b50506000910152565b60008151808452612b69816020860160208601612b2d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612b266020830184612b51565b600060208284031215612bc057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715612c3a57612c3a612bc7565b6040525050565b600067ffffffffffffffff821115612c5b57612c5b612bc7565b5060051b60200190565b600082601f830112612c7657600080fd5b81356020612c8382612c41565b604051612c908282612bf6565b83815260059390931b8501820192828101915086841115612cb057600080fd5b8286015b84811015612ccb5780358352918301918301612cb4565b509695505050505050565b600082601f830112612ce757600080fd5b813567ffffffffffffffff811115612d0157612d01612bc7565b604051612d3660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160182612bf6565b818152846020838601011115612d4b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612d8057600080fd5b612d8986612a88565b9450612d9760208701612a88565b9350604086013567ffffffffffffffff80821115612db457600080fd5b612dc089838a01612c65565b94506060880135915080821115612dd657600080fd5b612de289838a01612c65565b93506080880135915080821115612df857600080fd5b50612e0588828901612cd6565b9150509295509295909350565b60008060408385031215612e2557600080fd5b823567ffffffffffffffff80821115612e3d57600080fd5b818501915085601f830112612e5157600080fd5b81356020612e5e82612c41565b604051612e6b8282612bf6565b83815260059390931b8501820192828101915089841115612e8b57600080fd5b948201945b83861015612eb057612ea186612a88565b82529482019490820190612e90565b96505086013592505080821115612ec657600080fd5b50612ed385828601612c65565b9150509250929050565b600081518084526020808501945080840160005b83811015612f0d57815187529582019590820190600101612ef1565b509495945050505050565b602081526000612b266020830184612edd565b60008060408385031215612f3e57600080fd5b82359150602083013567ffffffffffffffff811115612f5c57600080fd5b612ed385828601612cd6565b60008060408385031215612f7b57600080fd5b612f8483612a88565b915060208301358015158114612f9957600080fd5b809150509250929050565b82518152602083015160208201526040830151151560408201526060830151606082015260808301511515608082015260c060a08201526000612fea60c0830184612b51565b949350505050565b6000806040838503121561300557600080fd5b61300e83612a88565b915061301c60208401612a88565b90509250929050565b600080600080600060a0868803121561303d57600080fd5b61304686612a88565b945061305460208701612a88565b93506040860135925060608601359150608086013567ffffffffffffffff81111561307e57600080fd5b612e0588828901612cd6565b60006020828403121561309c57600080fd5b612b2682612a88565b6000602082840312156130b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082613123577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f81527f69706e732f6b3531717a6935757175356469766b66613276787532693731796860208201527f6a336b36726d36626776676e64347130306834663830636234696d736739757960408201527f32396c2f000000000000000000000000000000000000000000000000000000006060820152600082516131d2816064850160208701612b2d565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000006064939091019283015250606901919050565b8082018082111561080d5761080d6130be565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361324a5761324a6130be565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561080d5761080d6130be565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132cb576132cb6130be565b500290565b600181811c908216806132e457607f821691505b602082108103610b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000602080835260008454613331816132d0565b80848701526040600180841660008114613352576001811461338a576133b8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010195506133b8565b896000528660002060005b858110156133b05781548b8201860152908301908801613395565b8a0184019650505b509398975050505050505050565b601f82111561340c57600081815260208120601f850160051c810160208610156133ed5750805b601f850160051c820191505b81811015611c0b578281556001016133f9565b505050565b815167ffffffffffffffff81111561342b5761342b612bc7565b61343f8161343984546132d0565b846133c6565b602080601f831160018114613492576000841561345c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611c0b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156134df578886015182559484019460019091019084016134c0565b508582101561351b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061353e6040830185612edd565b82810360208401526135508185612edd565b95945050505050565b6000825161356b818460208701612b2d565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a060408301526135ae60a0830186612edd565b82810360608401526135c08186612edd565b905082810360808401526135d48185612b51565b98975050505050505050565b6000602082840312156135f257600080fd5b8151612b2681612adb565b600060033d11156136165760046000803e5060005160e01c5b90565b600060443d10156136275790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561367557505050505090565b828501915081518181111561368d5750505050505090565b843d87010160208285010111156136a75750505050505090565b6136b660208286010187612bf6565b509095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a0608083015261370660a0830184612b51565b97965050505050505056fe68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f697066732f516d5052446a5367336964785445384254533337756d446d545a324c5a62337833344c5642514d79616a396e5679a26469706673582212209fab456873f585d4c5a15d0f6fd36964ea2c02426b8150e5ab345a67dea2d72764736f6c6343000810003368747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f69706e732f6b3531717a6935757175356469766b6661327678753269373179686a336b36726d36626776676e64347130306834663830636234696d736739757932396c2f7b69647d2e6a736f6e",
    "sourceMap": "1295:85:32:-:0;;;-1:-1:-1;;;;;;1295:85:32;1338:42;1295:85;;;1457:8;1431:34;;1544:8;1522:30;;1755:28;;;-1:-1:-1;;1755:28:32;;;1929:3;1911:21;;-1:-1:-1;;;2114:57:32;317:31:39;;;-1:-1:-1;;;364:12:39;357:41;2114:57:32;809:14986;2114:57;;;414:12:39;809:14986:32;2114:57;;;2104:68;;-1:-1:-1;;;2066:116:32;;;;583:25:39;1022:42:32;2066:24;556:18:39;2066:116:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2023:159;;;-1:-1:-1;;;;;2023:159:32;;;;-1:-1:-1;;;;;;2023:159:32;;;;;;;;2248:107;;;;;;;;;3935:201;;;;;;;;;;1112:62:17;;;;;;;;;;;;;;;;;1154:13;1162:4;1154:7;:13::i;:::-;-1:-1:-1;1721:1:16;1826:7;:22;941:32:15;724:10:23;941:18:15;:32::i;:::-;809:14986:32;;8176:86:17;8242:4;:13;8249:6;8242:4;:13;:::i;:::-;;8176:86;:::o;2438:187:15:-;2530:6;;;-1:-1:-1;;;;;2546:17:15;;;-1:-1:-1;;;;;;2546:17:15;;;;;;;2578:40;;2530:6;;;2546:17;2530:6;;2578:40;;2511:16;;2578:40;2501:124;2438:187;:::o;619:290:39:-;689:6;742:2;730:9;721:7;717:23;713:32;710:52;;;758:1;755;748:12;710:52;784:16;;-1:-1:-1;;;;;829:31:39;;819:42;;809:70;;875:1;872;865:12;809:70;898:5;619:290;-1:-1:-1;;;619:290:39:o;914:127::-;975:10;970:3;966:20;963:1;956:31;1006:4;1003:1;996:15;1030:4;1027:1;1020:15;1046:380;1125:1;1121:12;;;;1168;;;1189:61;;1243:4;1235:6;1231:17;1221:27;;1189:61;1296:2;1288:6;1285:14;1265:18;1262:38;1259:161;;1342:10;1337:3;1333:20;1330:1;1323:31;1377:4;1374:1;1367:15;1405:4;1402:1;1395:15;1259:161;;1046:380;;;:::o;1557:545::-;1659:2;1654:3;1651:11;1648:448;;;1695:1;1720:5;1716:2;1709:17;1765:4;1761:2;1751:19;1835:2;1823:10;1819:19;1816:1;1812:27;1806:4;1802:38;1871:4;1859:10;1856:20;1853:47;;;-1:-1:-1;1894:4:39;1853:47;1949:2;1944:3;1940:12;1937:1;1933:20;1927:4;1923:31;1913:41;;2004:82;2022:2;2015:5;2012:13;2004:82;;;2067:17;;;2048:1;2037:13;2004:82;;;2008:3;;;1648:448;1557:545;;;:::o;2278:1352::-;2398:10;;-1:-1:-1;;;;;2420:30:39;;2417:56;;;2453:18;;:::i;:::-;2482:97;2572:6;2532:38;2564:4;2558:11;2532:38;:::i;:::-;2526:4;2482:97;:::i;:::-;2634:4;;2698:2;2687:14;;2715:1;2710:663;;;;3417:1;3434:6;3431:89;;;-1:-1:-1;3486:19:39;;;3480:26;3431:89;-1:-1:-1;;2235:1:39;2231:11;;;2227:24;2223:29;2213:40;2259:1;2255:11;;;2210:57;3533:81;;2680:944;;2710:663;1504:1;1497:14;;;1541:4;1528:18;;-1:-1:-1;;2746:20:39;;;2864:236;2878:7;2875:1;2872:14;2864:236;;;2967:19;;;2961:26;2946:42;;3059:27;;;;3027:1;3015:14;;;;2894:19;;2864:236;;;2868:3;3128:6;3119:7;3116:19;3113:201;;;3189:19;;;3183:26;-1:-1:-1;;3272:1:39;3268:14;;;3284:3;3264:24;3260:37;3256:42;3241:58;3226:74;;3113:201;-1:-1:-1;;;;;3360:1:39;3344:14;;;3340:22;3327:36;;-1:-1:-1;2278:1352:39:o;:::-;809:14986:32;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361061024e5760003560e01c80638776d1d711610138578063bd85b039116100b0578063f242432a1161007f578063f649b01411610064578063f649b014146106e9578063f6b76685146106fe578063f9d7afd71461071e57600080fd5b8063f242432a146106a9578063f2fde38b146106c957600080fd5b8063bd85b039146105f9578063e8a3d48514610626578063e985e9c51461063b578063ec36d35e1461069157600080fd5b80639fe8d3aa11610107578063a574cea4116100ec578063a574cea41461058b578063b1251026146105b9578063b6ac642a146105d957600080fd5b80639fe8d3aa14610556578063a22cb4651461056b57600080fd5b80638776d1d7146104985780638d8b7ca9146104b85780638da5cb5b146104d857806395d89b411461050d57600080fd5b8063354228be116101cb57806366f9fa3a1161019a5780636ea5ba1a1161017f5780636ea5ba1a1461045b57806370a383e01461047b578063715018a61461048357600080fd5b806366f9fa3a146104315780636ba367a31461044657600080fd5b8063354228be146103ab5780634e1273f4146103c05780634f558e79146103ed57806363b613f21461041c57600080fd5b80630e89341c1161022257806318160ddd1161020757806318160ddd146103545780632e1a7d4d146103695780632eb2c2d61461038b57600080fd5b80630e89341c1461032157806312065fe01461034157600080fd5b8062fdd58e1461025357806301ffc9a71461028657806302943854146102b657806306fdde03146102cb575b600080fd5b34801561025f57600080fd5b5061027361026e366004612ab1565b610733565b6040519081526020015b60405180910390f35b34801561029257600080fd5b506102a66102a1366004612b09565b610813565b604051901515815260200161027d565b3480156102c257600080fd5b506102736108f6565b3480156102d757600080fd5b506103146040518060400160405280601a81526020017f426c6f636b736361706520536f6c6f205661756c74204e46547300000000000081525081565b60405161027d9190612b9b565b34801561032d57600080fd5b5061031461033c366004612bae565b610a50565b34801561034d57600080fd5b5047610273565b34801561036057600080fd5b50610273610a81565b34801561037557600080fd5b50610389610384366004612bae565b610b99565b005b34801561039757600080fd5b506103896103a6366004612d68565b610bec565b3480156103b757600080fd5b50600854610273565b3480156103cc57600080fd5b506103e06103db366004612e12565b610cb5565b60405161027d9190612f18565b3480156103f957600080fd5b506102a6610408366004612bae565b600090815260036020526040902054151590565b34801561042857600080fd5b50610389610e0d565b34801561043d57600080fd5b506102a6610e1c565b34801561045257600080fd5b50600a54610273565b34801561046757600080fd5b50610273610476366004612bae565b610f87565b610389611003565b34801561048f57600080fd5b5061038961110a565b3480156104a457600080fd5b506102736104b3366004612bae565b61111c565b3480156104c457600080fd5b506103896104d3366004612f2b565b6111a6565b3480156104e457600080fd5b5060055460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027d565b34801561051957600080fd5b506103146040518060400160405280600381526020017f425356000000000000000000000000000000000000000000000000000000000081525081565b34801561056257600080fd5b5061027361132e565b34801561057757600080fd5b50610389610586366004612f68565b6113c8565b34801561059757600080fd5b506105ab6105a6366004612bae565b6113d3565b60405161027d929190612fa4565b3480156105c557600080fd5b506103896105d4366004612bae565b6114f6565b3480156105e557600080fd5b506103896105f4366004612bae565b61153a565b34801561060557600080fd5b50610273610614366004612bae565b60009081526003602052604090205490565b34801561063257600080fd5b50610314611547565b34801561064757600080fd5b506102a6610656366004612ff2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561069d57600080fd5b5060095460ff166102a6565b3480156106b557600080fd5b506103896106c4366004613025565b611567565b3480156106d557600080fd5b506103896106e436600461308a565b611629565b3480156106f557600080fd5b506103896116e0565b34801561070a57600080fd5b5061038961071936600461308a565b6116f5565b34801561072a57600080fd5b50610389611770565b600073ffffffffffffffffffffffffffffffffffffffff83166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806108a657507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061080d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461080d565b600c546006546040517f90f7ff4c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839216906390f7ff4c90602401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906130a5565b9050806000036109a257600091505090565b600c546006546040517f03fa87b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906303fa87b490602401602060405180830381865afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906130a5565b9050610a4982826130ed565b9250505090565b6060610a5b8261178c565b604051602001610a6b9190613128565b6040516020818303038152906040529050919050565b60008060015b3073ffffffffffffffffffffffffffffffffffffffff16636ba367a36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af691906130a5565b8111610b93576040517fbd85b03900000000000000000000000000000000000000000000000000000000815260048101829052309063bd85b03990602401602060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7591906130a5565b610b7f9083613206565b915080610b8b81613219565b915050610a87565b50919050565b610ba161184a565b60055460405173ffffffffffffffffffffffffffffffffffffffff9091169082156108fc029083906000818181858888f19350505050158015610be8573d6000803e3d6000fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff8516331480610c155750610c158533610656565b610ca1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016107d4565b610cae85858585856118cb565b5050505050565b60608151835114610d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016107d4565b6000835167ffffffffffffffff811115610d6457610d64612bc7565b604051908082528060200260200182016040528015610d8d578160200160208202803683370190505b50905060005b8451811015610e0557610dd8858281518110610db157610db1613251565b6020026020010151858381518110610dcb57610dcb613251565b6020026020010151610733565b828281518110610dea57610dea613251565b6020908102919091010152610dfe81613219565b9050610d93565b509392505050565b610e1561184a565b6000600955565b600c546006546040517f90f7ff4c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839216906390f7ff4c90602401602060405180830381865afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb691906130a5565b905080600003610ec857600091505090565b600c546006546040517f9961cee400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526000929190911690639961cee490602401602060405180830381865afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6391906130a5565b90506000610f6f6108f6565b90506000610f7d8284613280565b1015935050505090565b600080610f938361111c565b90506001610fa13385610733565b1061080d576000838152600d60209081526040918290205482518681523392810192909252818301849052606082015290517f57e8bc4c74baca16ab16c5cc83fa0bc416b230ea2a49969e56a6fe1b5ea5a8639181900360800190a192915050565b61100b611c13565b60095460ff16611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5661756c7420697320636c6f736564000000000000000000000000000000000060448201526064016107d4565b34156110df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e73756666696369656e74204554480000000000000000000000000000000060448201526064016107d4565b6110eb34600a54611c86565b600a805460010190556110fe6000600955565b6111086001600455565b565b61111261184a565b6111086000611d73565b600754600090600161112e3385610733565b1061080d5760006301e1338060075461114791906130ed565b6000858152600d6020526040812060010154919250906111679042613280565b90506301d52bd08110611184576706f05b59d3b20000925061119e565b61118e8183613293565b60075461119b9190613280565b92505b505092915050565b6111ae61184a565b61126260405180602001604052806000815250600e600085815260200190815260200160002080546111df906132d0565b80601f016020809104026020016040519081016040528092919081815260200182805461120b906132d0565b80156112585780601f1061122d57610100808354040283529160200191611258565b820191906000526020600020905b81548152906001019060200180831161123b57829003601f168201915b5050505050611dea565b6112a8576000828152600e60205260409081902090517f47b41d480000000000000000000000000000000000000000000000000000000081526107d4919060040161331d565b6000828152600e602052604090206112c08282613411565b506112c9610e1c565b156112d657610be8611770565b60006112e061132e565b905060006112ec6108f6565b60408051848152602081018390529192507f6cac971587f3485cf88026d10806eb012734ef89e176a8317db787673df0bc86910160405180910390a150505050565b600c546006546040517f9961cee400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009283921690639961cee490602401602060405180830381865afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d91906130a5565b610be8338383611e43565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000828152600d60209081526040808320600e835292819020815160a08101835284548152600185015493810193909352600284015460ff9081161515928401929092526003840154606084810191909152600490940154909116151560808301528054819061146d906132d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611499906132d0565b80156114e65780601f106114bb576101008083540402835291602001916114e6565b820191906000526020600020905b8154815290600101906020018083116114c957829003601f168201915b5050505050905091509150915091565b6114fe61184a565b60088190556040518181527ff5ef0716d925ac1ef70d8b610f013c7fd7cd03f9120fb486f0c4f18b4ef6f5c5906020015b60405180910390a150565b61154261184a565b600755565b606060405180608001604052806053815260200161371260539139905090565b73ffffffffffffffffffffffffffffffffffffffff851633148061159057506115908533610656565b61161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016107d4565b610cae8585858585611f96565b61163161184a565b73ffffffffffffffffffffffffffffffffffffffff81166116d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107d4565b6116dd81611d73565b50565b6116e861184a565b6009541561110857600080fd5b6116fd61184a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f234e4926e7311948b723292a80f6b0aa228047bf0ef59c361707c3e91e0e33a29060200161152f565b61177861184a565b6009541561178557600080fd5b6001600955565b60606000611799836121e2565b600101905060008167ffffffffffffffff8111156117b9576117b9612bc7565b6040519080825280601f01601f1916602001820160405280156117e3576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846117ed57509392505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611108576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d4565b815183511461195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166119ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016107d4565b33611a0e8187878787876122c4565b60005b8451811015611b7e576000858281518110611a2e57611a2e613251565b602002602001015190506000858381518110611a4c57611a4c613251565b6020908102919091018101516000848152808352604080822073ffffffffffffffffffffffffffffffffffffffff8e168352909352919091205490915081811015611b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016107d4565b60008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8e8116855292528083208585039055908b16825281208054849290611b63908490613206565b9250508190555050505080611b7790613219565b9050611a11565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bf592919061352b565b60405180910390a4611c0b81878787878761248f565b505050505050565b600260045403611c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107d4565b6002600455565b6040805160a08101825260006020808301829052828401829052606083018290526080830182905285835283518082018552828152858352600e9091529290209091611cd29082613411565b5042816020018181525050611cf93383600160405180602001604052806000815250612719565b6000918252600d602090815260409283902082518155908201516001820155918101516002830180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0092831617905560608201516003840155608090910151600490920180549215159290911691909117905550565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611dfd9190613559565b6040516020818303038152906040528051906020012083604051602001611e249190613559565b6040516020818303038152906040528051906020012014905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416612039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016107d4565b33600061204585612890565b9050600061205285612890565b90506120628389898585896122c4565b60008681526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8c16845290915290205485811015612120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016107d4565b60008781526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8d8116855292528083208985039055908a1682528120805488929061216a908490613206565b9091555050604080518881526020810188905273ffffffffffffffffffffffffffffffffffffffff808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121d7848a8a8a8a8a6128db565b505050505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061222b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612257576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061227557662386f26fc10000830492506010015b6305f5e100831061228d576305f5e100830492506008015b61271083106122a157612710830492506004015b606483106122b3576064830492506002015b600a831061080d5760010192915050565b73ffffffffffffffffffffffffffffffffffffffff85166123585760005b8351811015612356578281815181106122fd576122fd613251565b60200260200101516003600086848151811061231b5761231b613251565b6020026020010151815260200190815260200160002060008282546123409190613206565b9091555061234f905081613219565b90506122e2565b505b73ffffffffffffffffffffffffffffffffffffffff8416611c0b5760005b835181101561248657600084828151811061239357612393613251565b6020026020010151905060008483815181106123b1576123b1613251565b6020026020010151905060006003600084815260200190815260200160002054905081811015612463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016107d4565b6000928352600360205260409092209103905561247f81613219565b9050612376565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15611c0b576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c81906125069089908990889088908890600401613575565b6020604051808303816000875af192505050801561255f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261255c918101906135e0565b60015b6126485761256b6135fd565b806308c379a0036125be575061257f613619565b8061258a57506125c0565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d49190612b9b565b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016107d4565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014612486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016107d4565b73ffffffffffffffffffffffffffffffffffffffff84166127bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016107d4565b3360006127c885612890565b905060006127d585612890565b90506127e6836000898585896122c4565b60008681526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915281208054879290612823908490613206565b9091555050604080518781526020810187905273ffffffffffffffffffffffffffffffffffffffff808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612486836000898989896128db565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128ca576128ca613251565b602090810291909101015292915050565b73ffffffffffffffffffffffffffffffffffffffff84163b15611c0b576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e619061295290899089908890889088906004016136c1565b6020604051808303816000875af19250505080156129ab575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526129a8918101906135e0565b60015b6129b75761256b6135fd565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014612486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016107d4565b803573ffffffffffffffffffffffffffffffffffffffff81168114612aac57600080fd5b919050565b60008060408385031215612ac457600080fd5b612acd83612a88565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146116dd57600080fd5b600060208284031215612b1b57600080fd5b8135612b2681612adb565b9392505050565b60005b83811015612b48578181015183820152602001612b30565b50506000910152565b60008151808452612b69816020860160208601612b2d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612b266020830184612b51565b600060208284031215612bc057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715612c3a57612c3a612bc7565b6040525050565b600067ffffffffffffffff821115612c5b57612c5b612bc7565b5060051b60200190565b600082601f830112612c7657600080fd5b81356020612c8382612c41565b604051612c908282612bf6565b83815260059390931b8501820192828101915086841115612cb057600080fd5b8286015b84811015612ccb5780358352918301918301612cb4565b509695505050505050565b600082601f830112612ce757600080fd5b813567ffffffffffffffff811115612d0157612d01612bc7565b604051612d3660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160182612bf6565b818152846020838601011115612d4b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612d8057600080fd5b612d8986612a88565b9450612d9760208701612a88565b9350604086013567ffffffffffffffff80821115612db457600080fd5b612dc089838a01612c65565b94506060880135915080821115612dd657600080fd5b612de289838a01612c65565b93506080880135915080821115612df857600080fd5b50612e0588828901612cd6565b9150509295509295909350565b60008060408385031215612e2557600080fd5b823567ffffffffffffffff80821115612e3d57600080fd5b818501915085601f830112612e5157600080fd5b81356020612e5e82612c41565b604051612e6b8282612bf6565b83815260059390931b8501820192828101915089841115612e8b57600080fd5b948201945b83861015612eb057612ea186612a88565b82529482019490820190612e90565b96505086013592505080821115612ec657600080fd5b50612ed385828601612c65565b9150509250929050565b600081518084526020808501945080840160005b83811015612f0d57815187529582019590820190600101612ef1565b509495945050505050565b602081526000612b266020830184612edd565b60008060408385031215612f3e57600080fd5b82359150602083013567ffffffffffffffff811115612f5c57600080fd5b612ed385828601612cd6565b60008060408385031215612f7b57600080fd5b612f8483612a88565b915060208301358015158114612f9957600080fd5b809150509250929050565b82518152602083015160208201526040830151151560408201526060830151606082015260808301511515608082015260c060a08201526000612fea60c0830184612b51565b949350505050565b6000806040838503121561300557600080fd5b61300e83612a88565b915061301c60208401612a88565b90509250929050565b600080600080600060a0868803121561303d57600080fd5b61304686612a88565b945061305460208701612a88565b93506040860135925060608601359150608086013567ffffffffffffffff81111561307e57600080fd5b612e0588828901612cd6565b60006020828403121561309c57600080fd5b612b2682612a88565b6000602082840312156130b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082613123577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f81527f69706e732f6b3531717a6935757175356469766b66613276787532693731796860208201527f6a336b36726d36626776676e64347130306834663830636234696d736739757960408201527f32396c2f000000000000000000000000000000000000000000000000000000006060820152600082516131d2816064850160208701612b2d565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000006064939091019283015250606901919050565b8082018082111561080d5761080d6130be565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361324a5761324a6130be565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561080d5761080d6130be565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132cb576132cb6130be565b500290565b600181811c908216806132e457607f821691505b602082108103610b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000602080835260008454613331816132d0565b80848701526040600180841660008114613352576001811461338a576133b8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010195506133b8565b896000528660002060005b858110156133b05781548b8201860152908301908801613395565b8a0184019650505b509398975050505050505050565b601f82111561340c57600081815260208120601f850160051c810160208610156133ed5750805b601f850160051c820191505b81811015611c0b578281556001016133f9565b505050565b815167ffffffffffffffff81111561342b5761342b612bc7565b61343f8161343984546132d0565b846133c6565b602080601f831160018114613492576000841561345c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611c0b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156134df578886015182559484019460019091019084016134c0565b508582101561351b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061353e6040830185612edd565b82810360208401526135508185612edd565b95945050505050565b6000825161356b818460208701612b2d565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a060408301526135ae60a0830186612edd565b82810360608401526135c08186612edd565b905082810360808401526135d48185612b51565b98975050505050505050565b6000602082840312156135f257600080fd5b8151612b2681612adb565b600060033d11156136165760046000803e5060005160e01c5b90565b600060443d10156136275790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561367557505050505090565b828501915081518181111561368d5750505050505090565b843d87010160208285010111156136a75750505050505090565b6136b660208286010187612bf6565b509095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a0608083015261370660a0830184612b51565b97965050505050505056fe68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f697066732f516d5052446a5367336964785445384254533337756d446d545a324c5a62337833344c5642514d79616a396e5679a26469706673582212209fab456873f585d4c5a15d0f6fd36964ea2c02426b8150e5ab345a67dea2d72764736f6c63430008100033",
    "sourceMap": "809:14986:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2190:227:17;;;;;;;;;;-1:-1:-1;2190:227:17;;;;;:::i;:::-;;:::i;:::-;;;620:25:39;;;608:2;593:18;2190:227:17;;;;;;;;1241:305;;;;;;;;;;-1:-1:-1;1241:305:17;;;;;:::i;:::-;;:::i;:::-;;;1253:14:39;;1246:22;1228:41;;1216:2;1201:18;1241:305:17;1088:187:39;10433:425:32;;;;;;;;;;;;;:::i;1102:58::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14168:364::-;;;;;;;;;;-1:-1:-1;14168:364:32;;;;;:::i;:::-;;:::i;13231:99::-;;;;;;;;;;-1:-1:-1;13302:21:32;13231:99;;13425:225;;;;;;;;;;;;;:::i;5173:103::-;;;;;;;;;;-1:-1:-1;5173:103:32;;;;;:::i;:::-;;:::i;:::-;;4069:426:17;;;;;;;;;;-1:-1:-1;4069:426:17;;;;;:::i;:::-;;:::i;9676:95:32:-;;;;;;;;;;-1:-1:-1;9753:11:32;;9676:95;;2574:508:17;;;;;;;;;;-1:-1:-1;2574:508:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;906:120:20:-;;;;;;;;;;-1:-1:-1;906:120:20;;;;;:::i;:::-;963:4;790:16;;;:12;:16;;;;;;-1:-1:-1;;;906:120:20;5436:125:32;;;;;;;;;;;;;:::i;10930:475::-;;;;;;;;;;;;;:::i;13034:83::-;;;;;;;;;;-1:-1:-1;13103:7:32;;13034:83;;7713:469;;;;;;;;;;-1:-1:-1;7713:469:32;;;;;:::i;:::-;;:::i;5691:683::-;;;:::i;1836:101:15:-;;;;;;;;;;;;;:::i;11703:741:32:-;;;;;;;;;;-1:-1:-1;11703:741:32;;;;;:::i;:::-;;:::i;6969:559::-;;;;;;;;;;-1:-1:-1;6969:559:32;;;;;:::i;:::-;;:::i;1206:85:15:-;;;;;;;;;;-1:-1:-1;1278:6:15;;1206:85;;1278:6;;;;7724:74:39;;7712:2;7697:18;1206:85:15;7578:226:39;1199:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9997:213;;;;;;;;;;;;;:::i;3150:153:17:-;;;;;;;;;;-1:-1:-1;3150:153:17;;;;;:::i;:::-;;:::i;12636:280:32:-;;;;;;;;;;-1:-1:-1;12636:280:32;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;8420:143::-;;;;;;;;;;-1:-1:-1;8420:143:32;;;;;:::i;:::-;;:::i;8691:102::-;;;;;;;;;;-1:-1:-1;8691:102:32;;;;;:::i;:::-;;:::i;702:111:20:-;;;;;;;;;;-1:-1:-1;702:111:20;;;;;:::i;:::-;764:7;790:16;;;:12;:16;;;;;;;702:111;13846:182:32;;;;;;;;;;;;;:::i;3370:166:17:-;;;;;;;;;;-1:-1:-1;3370:166:17;;;;;:::i;:::-;3492:27;;;;3469:4;3492:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3370:166;9479:89:32;;;;;;;;;;-1:-1:-1;9546:15:32;;;;9479:89;;3603:394:17;;;;;;;;;;-1:-1:-1;3603:394:17;;;;;:::i;:::-;;:::i;2086:198:15:-;;;;;;;;;;-1:-1:-1;2086:198:15;;;;;:::i;:::-;;:::i;6492:240:32:-;;;;;;;;;;;;;:::i;8967:259::-;;;;;;;;;;-1:-1:-1;8967:259:32;;;;;:::i;:::-;;:::i;4543:279::-;;;;;;;;;;;;;:::i;2190:227:17:-;2276:7;2303:21;;;2295:76;;;;;;;10072:2:39;2295:76:17;;;10054:21:39;10111:2;10091:18;;;10084:30;10150:34;10130:18;;;10123:62;10221:12;10201:18;;;10194:40;10251:19;;2295:76:17;;;;;;;;;-1:-1:-1;2388:9:17;:13;;;;;;;;;;;:22;;;;;;;;;;;2190:227;;;;;:::o;1241:305::-;1343:4;1378:41;;;1393:26;1378:41;;:109;;-1:-1:-1;1435:52:17;;;1450:37;1435:52;1378:109;:161;;;-1:-1:-1;957:25:25;942:40;;;;1503:36:17;834:155:25;10433:425:32;10523:17;;10575:24;;10523:86;;;;;:17;10575:24;;;10523:86;;;7724:74:39;10480:7:32;;;;10523:17;;:38;;7697:18:39;;10523:86:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10499:110;;10623:13;10640:1;10623:18;10619:57;;10664:1;10657:8;;;10433:425;:::o;10619:57::-;10712:17;;10766:24;;10712:88;;;;;:17;10766:24;;;10712:88;;;7724:74:39;10686:23:32;;10712:17;;;;;:40;;7697:18:39;;10712:88:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10686:114;-1:-1:-1;10819:31:32;10837:13;10686:114;10819:31;:::i;:::-;10811:40;;;;10433:425;:::o;14168:364::-;14261:13;14460:26;14477:8;14460:16;:26::i;:::-;14309:216;;;;;;;;:::i;:::-;;;;;;;;;;;;;14290:235;;14168:364;;;:::o;13425:225::-;13471:7;;13535:1;13518:103;13543:4;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13538:1;:22;13518:103;;13591:19;;;;;;;;620:25:39;;;13591:4:32;;:16;;593:18:39;;13591:19:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13581:29;;;;:::i;:::-;;-1:-1:-1;13562:3:32;;;;:::i;:::-;;;;13518:103;;;-1:-1:-1;13637:6:32;13425:225;-1:-1:-1;13425:225:32:o;5173:103::-;1099:13:15;:11;:13::i;:::-;1278:6;;5235:34:32::1;::::0;1278:6:15;;;;;5235:34:32;::::1;;;::::0;5261:7;;5235:34:::1;::::0;;;5261:7;1278:6:15;5235:34:32;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;5173:103:::0;:::o;4069:426:17:-;4294:20;;;724:10:23;4294:20:17;;:60;;-1:-1:-1;4318:36:17;4335:4;724:10:23;3370:166:17;:::i;4318:36::-;4273:153;;;;;;;12444:2:39;4273:153:17;;;12426:21:39;12483:2;12463:18;;;12456:30;12522:34;12502:18;;;12495:62;12593:16;12573:18;;;12566:44;12627:19;;4273:153:17;12242:410:39;4273:153:17;4436:52;4459:4;4465:2;4469:3;4474:7;4483:4;4436:22;:52::i;:::-;4069:426;;;;;:::o;2574:508::-;2725:16;2784:3;:10;2765:8;:15;:29;2757:83;;;;;;;12859:2:39;2757:83:17;;;12841:21:39;12898:2;12878:18;;;12871:30;12937:34;12917:18;;;12910:62;13008:11;12988:18;;;12981:39;13037:19;;2757:83:17;12657:405:39;2757:83:17;2851:30;2898:8;:15;2884:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2884:30:17;;2851:63;;2930:9;2925:120;2949:8;:15;2945:1;:19;2925:120;;;3004:30;3014:8;3023:1;3014:11;;;;;;;;:::i;:::-;;;;;;;3027:3;3031:1;3027:6;;;;;;;;:::i;:::-;;;;;;;3004:9;:30::i;:::-;2985:13;2999:1;2985:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2966:3;;;:::i;:::-;;;2925:120;;;-1:-1:-1;3062:13:17;2574:508;-1:-1:-1;;;2574:508:17:o;5436:125:32:-;1099:13:15;:11;:13::i;:::-;5543:1:32::1;5521:20;5514:31;5436:125::o:0;10930:475::-;11024:17;;11076:24;;11024:86;;;;;:17;11076:24;;;11024:86;;;7724:74:39;10984:4:32;;;;11024:17;;:38;;7697:18:39;;11024:86:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11000:110;;11124:13;11141:1;11124:18;11120:61;;11165:5;11158:12;;;10930:475;:::o;11120:61::-;11214:17;;11261:24;;11214:81;;;;;:17;11261:24;;;11214:81;;;7724:74:39;11191:20:32;;11214:17;;;;;:33;;7697:18:39;;11214:81:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11191:104;;11305:21;11329:16;:14;:16::i;:::-;11305:40;-1:-1:-1;11397:1:32;11364:28;11305:40;11364:12;:28;:::i;:::-;11363:35;;11356:42;;;;;10930:475;:::o;7713:469::-;7794:15;7825:22;7850:33;7874:8;7850:23;:33::i;:::-;7825:58;;7933:1;7898:31;7908:10;7920:8;7898:9;:31::i;:::-;:36;7894:250;;8082:27;;;;:17;:27;;;;;;;;;:37;7955:178;;13620:25:39;;;8022:10:32;13661:18:39;;;13654:83;;;;13753:18;;;13746:34;;;13811:2;13796:18;;13789:34;7955:178:32;;;;;;;13607:3:39;7955:178:32;;;8161:14;7713:469;-1:-1:-1;;7713:469:32:o;5691:683::-;2266:21:16;:19;:21::i;:::-;5808:15:32::1;::::0;::::1;;5800:43;;;::::0;::::1;::::0;;14036:2:39;5800:43:32::1;::::0;::::1;14018:21:39::0;14075:2;14055:18;;;14048:30;14114:17;14094:18;;;14087:45;14149:18;;5800:43:32::1;13834:339:39::0;5800:43:32::1;5935:9;:14:::0;5927:43:::1;;;::::0;::::1;::::0;;14380:2:39;5927:43:32::1;::::0;::::1;14362:21:39::0;14419:2;14399:18;;;14392:30;14458:18;14438;;;14431:46;14494:18;;5927:43:32::1;14178:340:39::0;5927:43:32::1;6028:46;6055:9;6066:7;;6028:26;:46::i;:::-;6171:12;6165:19:::0;;6241:1:::1;6222:21;6256:39:::0;;6342:25:::1;5543:1;5521:20;5514:31;5436:125:::0;6342:25:::1;2308:20:16::0;1721:1;2814:7;:22;2634:209;2308:20;5691:683:32:o;1836:101:15:-;1099:13;:11;:13::i;:::-;1900:30:::1;1927:1;1900:18;:30::i;11703:741:32:-:0;11855:15;;11799;;11920:1;11885:31;11895:10;11907:8;11885:9;:31::i;:::-;:36;11881:526;;12003:14;12039:8;12021:15;;:26;;;;:::i;:::-;12069:18;12125:27;;;:17;:27;;;;;:43;;;12003:45;;-1:-1:-1;12069:18:32;12090:79;;:15;:79;:::i;:::-;12069:100;;12201:8;12187:10;:22;12183:214;;12246:9;12229:26;;12183:214;;;12361:19;12370:10;12361:6;:19;:::i;:::-;12342:15;;:39;;;;:::i;:::-;12324:58;;12183:214;11923:484;;12423:14;11703:741;-1:-1:-1;;11703:741:32:o;6969:559::-;1099:13:15;:11;:13::i;:::-;7086:47:32::1;;;;;;;;;;;;::::0;7104:18:::1;:28;7123:8;7104:28;;;;;;;;;;;7086:47;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:13;:47::i;:::-;7081:135;;7176:28;::::0;;;:18:::1;:28;::::0;;;;;;7156:49;;::::1;::::0;;::::1;::::0;7176:28;7156:49:::1;;;:::i;7081:135::-;7225:28;::::0;;;:18:::1;:28;::::0;;;;:36:::1;7256:5:::0;7225:28;:36:::1;:::i;:::-;;7276:23;:21;:23::i;:::-;7272:250;;;7315:15;:13;:15::i;7272:250::-;7361:20;7384:22;:20;:22::i;:::-;7361:45;;7420:14;7437:16;:14;:16::i;:::-;7473:38;::::0;;18773:25:39;;;18829:2;18814:18;;18807:34;;;7420:33:32;;-1:-1:-1;7473:38:32::1;::::0;18746:18:39;7473:38:32::1;;;;;;;7347:175;;6969:559:::0;;:::o;9997:213::-;10092:17;;10139:24;;10092:81;;;;;:17;10139:24;;;10092:81;;;7724:74:39;10050:7:32;;;;10092:17;;:33;;7697:18:39;;10092:81:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3150:153:17:-;3244:52;724:10:23;3277:8:17;3287;3244:18;:52::i;12636:280:32:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12788:27:32;;;;:17;:27;;;;;;;;12871:18;:28;;;;;;12767:142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12739:12;12767:142;;;;;;;;;;;;;;;;;;;;;;;12871:28;;12767:142;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12636:280;;;:::o;8420:143::-;1099:13:15;:11;:13::i;:::-;8492:11:32::1;:23:::0;;;8530:26:::1;::::0;620:25:39;;;8530:26:32::1;::::0;608:2:39;593:18;8530:26:32::1;;;;;;;;8420:143:::0;:::o;8691:102::-;1099:13:15;:11;:13::i;:::-;8761:15:32::1;:25:::0;8691:102::o;13846:182::-;13892:13;13917:104;;;;;;;;;;;;;;;;;;;13846:182;:::o;3603:394:17:-;3803:20;;;724:10:23;3803:20:17;;:60;;-1:-1:-1;3827:36:17;3844:4;724:10:23;3370:166:17;:::i;3827:36::-;3782:153;;;;;;;12444:2:39;3782:153:17;;;12426:21:39;12483:2;12463:18;;;12456:30;12522:34;12502:18;;;12495:62;12593:16;12573:18;;;12566:44;12627:19;;3782:153:17;12242:410:39;3782:153:17;3945:45;3963:4;3969:2;3973;3977:6;3985:4;3945:17;:45::i;2086:198:15:-;1099:13;:11;:13::i;:::-;2174:22:::1;::::0;::::1;2166:73;;;::::0;::::1;::::0;;19054:2:39;2166:73:15::1;::::0;::::1;19036:21:39::0;19093:2;19073:18;;;19066:30;19132:34;19112:18;;;19105:62;19203:8;19183:18;;;19176:36;19229:19;;2166:73:15::1;18852:402:39::0;2166:73:15::1;2249:28;2268:8;2249:18;:28::i;:::-;2086:198:::0;:::o;6492:240:32:-;1099:13:15;:11;:13::i;:::-;6625:20:32::1;6619:27;6616:75;;;6675:1;6672::::0;6665:12:::1;8967:259:::0;1099:13:15;:11;:13::i;:::-;9091:24:32::1;:55:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;9161:58:::1;::::0;7724:74:39;;;9161:58:32::1;::::0;7712:2:39;7697:18;9161:58:32::1;7578:226:39::0;4543:279:32;1099:13:15;:11;:13::i;:::-;4696:20:32::1;4690:27;4687:75;;;4746:1;4743::::0;4736:12:::1;4687:75;4804:1;4782:20;4775:31;4543:279::o:0;420:696:24:-;476:13;525:14;542:17;553:5;542:10;:17::i;:::-;562:1;542:21;525:38;;577:20;611:6;600:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;600:18:24;-1:-1:-1;577:41:24;-1:-1:-1;738:28:24;;;754:2;738:28;793:280;824:5;;963:8;958:2;947:14;;942:30;824:5;929:44;1017:2;1008:11;;;-1:-1:-1;1037:21:24;793:280;1037:21;-1:-1:-1;1093:6:24;420:696;-1:-1:-1;;;420:696:24:o;1364:130:15:-;1278:6;;1427:23;1278:6;724:10:23;1427:23:15;1419:68;;;;;;;19461:2:39;1419:68:15;;;19443:21:39;;;19480:18;;;19473:30;19539:34;19519:18;;;19512:62;19591:18;;1419:68:15;19259:356:39;6238:1115:17;6458:7;:14;6444:3;:10;:28;6436:81;;;;;;;19822:2:39;6436:81:17;;;19804:21:39;19861:2;19841:18;;;19834:30;19900:34;19880:18;;;19873:62;19971:10;19951:18;;;19944:38;19999:19;;6436:81:17;19620:404:39;6436:81:17;6535:16;;;6527:66;;;;;;;20231:2:39;6527:66:17;;;20213:21:39;20270:2;20250:18;;;20243:30;20309:34;20289:18;;;20282:62;20380:7;20360:18;;;20353:35;20405:19;;6527:66:17;20029:401:39;6527:66:17;724:10:23;6646:60:17;724:10:23;6677:4:17;6683:2;6687:3;6692:7;6701:4;6646:20;:60::i;:::-;6722:9;6717:411;6741:3;:10;6737:1;:14;6717:411;;;6772:10;6785:3;6789:1;6785:6;;;;;;;;:::i;:::-;;;;;;;6772:19;;6805:14;6822:7;6830:1;6822:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6847:19;6869:13;;;;;;;;;;:19;;;;;;;;;;;;;6822:10;;-1:-1:-1;6910:21:17;;;;6902:76;;;;;;;20637:2:39;6902:76:17;;;20619:21:39;20676:2;20656:18;;;20649:30;20715:34;20695:18;;;20688:62;20786:12;20766:18;;;20759:40;20816:19;;6902:76:17;20435:406:39;6902:76:17;7020:9;:13;;;;;;;;;;;:19;;;;;;;;;;;7042:20;;;7020:42;;7090:17;;;;;;;:27;;7042:20;;7020:9;7090:27;;7042:20;;7090:27;:::i;:::-;;;;;;;;6758:370;;;6753:3;;;;:::i;:::-;;;6717:411;;;;7173:2;7143:47;;7167:4;7143:47;;7157:8;7143:47;;;7177:3;7182:7;7143:47;;;;;;;:::i;:::-;;;;;;;;7271:75;7307:8;7317:4;7323:2;7327:3;7332:7;7341:4;7271:35;:75::i;:::-;6426:927;6238:1115;;;;;:::o;2341:287:16:-;1764:1;2473:7;;:19;2465:63;;;;;;;21518:2:39;2465:63:16;;;21500:21:39;21557:2;21537:18;;;21530:30;21596:33;21576:18;;;21569:61;21647:18;;2465:63:16;21316:355:39;2465:63:16;1764:1;2603:7;:18;2341:287::o;14755:422:32:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14904:31:32;;;14993:33;;;;;;;;;;:28;;;:18;:28;;;;;;-1:-1:-1;;14993:33:32;;:28;:33;:::i;:::-;;15063:15;15036:8;:24;;:42;;;;;15088:34;15094:10;15106:8;15116:1;15088:34;;;;;;;;;;;;:5;:34::i;:::-;15132:27;;;;:17;:27;;;;;;;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14755:422:32:o;2438:187:15:-;2530:6;;;;2546:17;;;;;;;;;;;2578:40;;2530:6;;;2546:17;2530:6;;2578:40;;2511:16;;2578:40;2501:124;2438:187;:::o;15575:218:32:-;15677:4;15781:1;15763:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;15753:32;;;;;;15733:1;15715:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;15705:32;;;;;;:80;15697:89;;15575:218;;;;:::o;12915:323:17:-;13065:8;13056:17;;:5;:17;;;13048:71;;;;;;;23643:2:39;13048:71:17;;;23625:21:39;23682:2;23662:18;;;23655:30;23721:34;23701:18;;;23694:62;23792:11;23772:18;;;23765:39;23821:19;;13048:71:17;23441:405:39;13048:71:17;13129:25;;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13190:41;;1228::39;;;13190::17;;1201:18:39;13190:41:17;;;;;;;12915:323;;;:::o;4945:947::-;5126:16;;;5118:66;;;;;;;20231:2:39;5118:66:17;;;20213:21:39;20270:2;20250:18;;;20243:30;20309:34;20289:18;;;20282:62;20380:7;20360:18;;;20353:35;20405:19;;5118:66:17;20029:401:39;5118:66:17;724:10:23;5195:16:17;5259:21;5277:2;5259:17;:21::i;:::-;5236:44;;5290:24;5317:25;5335:6;5317:17;:25::i;:::-;5290:52;;5353:60;5374:8;5384:4;5390:2;5394:3;5399:7;5408:4;5353:20;:60::i;:::-;5424:19;5446:13;;;;;;;;;;;:19;;;;;;;;;;;5483:21;;;;5475:76;;;;;;;20637:2:39;5475:76:17;;;20619:21:39;20676:2;20656:18;;;20649:30;20715:34;20695:18;;;20688:62;20786:12;20766:18;;;20759:40;20816:19;;5475:76:17;20435:406:39;5475:76:17;5585:9;:13;;;;;;;;;;;:19;;;;;;;;;;;5607:20;;;5585:42;;5647:17;;;;;;;:27;;5607:20;;5585:9;5647:27;;5607:20;;5647:27;:::i;:::-;;;;-1:-1:-1;;5690:46:17;;;18773:25:39;;;18829:2;18814:18;;18807:34;;;5690:46:17;;;;;;;;;;;;;;;18746:18:39;5690:46:17;;;;;;;5817:68;5848:8;5858:4;5864:2;5868;5872:6;5880:4;5817:30;:68::i;:::-;5108:784;;;;4945:947;;;;;:::o;9919:890:27:-;9972:7;;10056:6;10047:15;;10043:99;;10091:6;10082:15;;;-1:-1:-1;10125:2:27;10115:12;10043:99;10168:6;10159:5;:15;10155:99;;10203:6;10194:15;;;-1:-1:-1;10237:2:27;10227:12;10155:99;10280:6;10271:5;:15;10267:99;;10315:6;10306:15;;;-1:-1:-1;10349:2:27;10339:12;10267:99;10392:5;10383;:14;10379:96;;10426:5;10417:14;;;-1:-1:-1;10459:1:27;10449:11;10379:96;10501:5;10492;:14;10488:96;;10535:5;10526:14;;;-1:-1:-1;10568:1:27;10558:11;10488:96;10610:5;10601;:14;10597:96;;10644:5;10635:14;;;-1:-1:-1;10677:1:27;10667:11;10597:96;10719:5;10710;:14;10706:64;;10754:1;10744:11;10796:6;9919:890;-1:-1:-1;;9919:890:27:o;1096:904:20:-;1408:18;;;1404:156;;1447:9;1442:108;1466:3;:10;1462:1;:14;1442:108;;;1525:7;1533:1;1525:10;;;;;;;;:::i;:::-;;;;;;;1501:12;:20;1514:3;1518:1;1514:6;;;;;;;;:::i;:::-;;;;;;;1501:20;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;1478:3:20;;-1:-1:-1;1478:3:20;;:::i;:::-;;;1442:108;;;;1404:156;1574:16;;;1570:424;;1611:9;1606:378;1630:3;:10;1626:1;:14;1606:378;;;1665:10;1678:3;1682:1;1678:6;;;;;;;;:::i;:::-;;;;;;;1665:19;;1702:14;1719:7;1727:1;1719:10;;;;;;;;:::i;:::-;;;;;;;1702:27;;1747:14;1764:12;:16;1777:2;1764:16;;;;;;;;;;;;1747:33;;1816:6;1806;:16;;1798:69;;;;;;;24053:2:39;1798:69:20;;;24035:21:39;24092:2;24072:18;;;24065:30;24131:34;24111:18;;;24104:62;24202:10;24182:18;;;24175:38;24230:19;;1798:69:20;23851:404:39;1798:69:20;1917:16;;;;:12;:16;;;;;;1936:15;;1917:34;;1642:3;;;:::i;:::-;;;1606:378;;;;1096:904;;;;;;:::o;16271:792:17:-;16503:13;;;1470:19:22;:23;16499:558:17;;16538:79;;;;;:43;;;;;;:79;;16582:8;;16592:4;;16598:3;;16603:7;;16612:4;;16538:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16538:79:17;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16534:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16923:6;16916:14;;;;;;;;;;;:::i;16534:513::-;;;16970:62;;;;;26491:2:39;16970:62:17;;;26473:21:39;26530:2;26510:18;;;26503:30;26569:34;26549:18;;;26542:62;26640:22;26620:18;;;26613:50;26680:19;;16970:62:17;26289:416:39;16534:513:17;16696:60;;;16708:48;16696:60;16692:157;;16780:50;;;;;26912:2:39;16780:50:17;;;26894:21:39;26951:2;26931:18;;;26924:30;26990:34;26970:18;;;26963:62;27061:10;27041:18;;;27034:38;27089:19;;16780:50:17;26710:404:39;8635:709:17;8782:16;;;8774:62;;;;;;;27321:2:39;8774:62:17;;;27303:21:39;27360:2;27340:18;;;27333:30;27399:34;27379:18;;;27372:62;27470:3;27450:18;;;27443:31;27491:19;;8774:62:17;27119:397:39;8774:62:17;724:10:23;8847:16:17;8911:21;8929:2;8911:17;:21::i;:::-;8888:44;;8942:24;8969:25;8987:6;8969:17;:25::i;:::-;8942:52;;9005:66;9026:8;9044:1;9048:2;9052:3;9057:7;9066:4;9005:20;:66::i;:::-;9082:9;:13;;;;;;;;;;;:17;;;;;;;;;;:27;;9103:6;;9082:9;:27;;9103:6;;9082:27;:::i;:::-;;;;-1:-1:-1;;9124:52:17;;;18773:25:39;;;18829:2;18814:18;;18807:34;;;9124:52:17;;;;;9157:1;;9124:52;;;;;;18746:18:39;9124:52:17;;;;;;;9263:74;9294:8;9312:1;9316:2;9320;9324:6;9332:4;9263:30;:74::i;17069:193::-;17188:16;;;17202:1;17188:16;;;;;;;;;17135;;17163:22;;17188:16;;;;;;;;;;;;-1:-1:-1;17188:16:17;17163:41;;17225:7;17214:5;17220:1;17214:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17250:5;17069:193;-1:-1:-1;;17069:193:17:o;15540:725::-;15747:13;;;1470:19:22;:23;15743:516:17;;15782:72;;;;;:38;;;;;;:72;;15821:8;;15831:4;;15837:2;;15841:6;;15849:4;;15782:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15782:72:17;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;15778:471;;;;:::i;:::-;15903:55;;;15915:43;15903:55;15899:152;;15982:50;;;;;26912:2:39;15982:50:17;;;26894:21:39;26951:2;26931:18;;;26924:30;26990:34;26970:18;;;26963:62;27061:10;27041:18;;;27034:38;27089:19;;15982:50:17;26710:404:39;14:196;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:254::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:39:o;656:177::-;741:66;734:5;730:78;723:5;720:89;710:117;;823:1;820;813:12;838:245;896:6;949:2;937:9;928:7;924:23;920:32;917:52;;;965:1;962;955:12;917:52;1004:9;991:23;1023:30;1047:5;1023:30;:::i;:::-;1072:5;838:245;-1:-1:-1;;;838:245:39:o;1280:250::-;1365:1;1375:113;1389:6;1386:1;1383:13;1375:113;;;1465:11;;;1459:18;1446:11;;;1439:39;1411:2;1404:10;1375:113;;;-1:-1:-1;;1522:1:39;1504:16;;1497:27;1280:250::o;1535:330::-;1577:3;1615:5;1609:12;1642:6;1637:3;1630:19;1658:76;1727:6;1720:4;1715:3;1711:14;1704:4;1697:5;1693:16;1658:76;:::i;:::-;1779:2;1767:15;1784:66;1763:88;1754:98;;;;1854:4;1750:109;;1535:330;-1:-1:-1;;1535:330:39:o;1870:220::-;2019:2;2008:9;2001:21;1982:4;2039:45;2080:2;2069:9;2065:18;2057:6;2039:45;:::i;2095:180::-;2154:6;2207:2;2195:9;2186:7;2182:23;2178:32;2175:52;;;2223:1;2220;2213:12;2175:52;-1:-1:-1;2246:23:39;;2095:180;-1:-1:-1;2095:180:39:o;2280:184::-;2332:77;2329:1;2322:88;2429:4;2426:1;2419:15;2453:4;2450:1;2443:15;2469:308;2575:66;2570:2;2564:4;2560:13;2556:86;2548:6;2544:99;2709:6;2697:10;2694:22;2673:18;2661:10;2658:34;2655:62;2652:88;;;2720:18;;:::i;:::-;2756:2;2749:22;-1:-1:-1;;2469:308:39:o;2782:183::-;2842:4;2875:18;2867:6;2864:30;2861:56;;;2897:18;;:::i;:::-;-1:-1:-1;2942:1:39;2938:14;2954:4;2934:25;;2782:183::o;2970:724::-;3024:5;3077:3;3070:4;3062:6;3058:17;3054:27;3044:55;;3095:1;3092;3085:12;3044:55;3131:6;3118:20;3157:4;3180:43;3220:2;3180:43;:::i;:::-;3252:2;3246:9;3264:31;3292:2;3284:6;3264:31;:::i;:::-;3330:18;;;3422:1;3418:10;;;;3406:23;;3402:32;;;3364:15;;;;-1:-1:-1;3446:15:39;;;3443:35;;;3474:1;3471;3464:12;3443:35;3510:2;3502:6;3498:15;3522:142;3538:6;3533:3;3530:15;3522:142;;;3604:17;;3592:30;;3642:12;;;;3555;;3522:142;;;-1:-1:-1;3682:6:39;2970:724;-1:-1:-1;;;;;;2970:724:39:o;3699:614::-;3741:5;3794:3;3787:4;3779:6;3775:17;3771:27;3761:55;;3812:1;3809;3802:12;3761:55;3848:6;3835:20;3874:18;3870:2;3867:26;3864:52;;;3896:18;;:::i;:::-;3945:2;3939:9;3957:126;4077:4;4008:66;4001:4;3997:2;3993:13;3989:86;3985:97;3977:6;3957:126;:::i;:::-;4107:2;4099:6;4092:18;4153:3;4146:4;4141:2;4133:6;4129:15;4125:26;4122:35;4119:55;;;4170:1;4167;4160:12;4119:55;4234:2;4227:4;4219:6;4215:17;4208:4;4200:6;4196:17;4183:54;4281:1;4257:15;;;4274:4;4253:26;4246:37;;;;4261:6;3699:614;-1:-1:-1;;;3699:614:39:o;4318:943::-;4472:6;4480;4488;4496;4504;4557:3;4545:9;4536:7;4532:23;4528:33;4525:53;;;4574:1;4571;4564:12;4525:53;4597:29;4616:9;4597:29;:::i;:::-;4587:39;;4645:38;4679:2;4668:9;4664:18;4645:38;:::i;:::-;4635:48;;4734:2;4723:9;4719:18;4706:32;4757:18;4798:2;4790:6;4787:14;4784:34;;;4814:1;4811;4804:12;4784:34;4837:61;4890:7;4881:6;4870:9;4866:22;4837:61;:::i;:::-;4827:71;;4951:2;4940:9;4936:18;4923:32;4907:48;;4980:2;4970:8;4967:16;4964:36;;;4996:1;4993;4986:12;4964:36;5019:63;5074:7;5063:8;5052:9;5048:24;5019:63;:::i;:::-;5009:73;;5135:3;5124:9;5120:19;5107:33;5091:49;;5165:2;5155:8;5152:16;5149:36;;;5181:1;5178;5171:12;5149:36;;5204:51;5247:7;5236:8;5225:9;5221:24;5204:51;:::i;:::-;5194:61;;;4318:943;;;;;;;;:::o;5266:1208::-;5384:6;5392;5445:2;5433:9;5424:7;5420:23;5416:32;5413:52;;;5461:1;5458;5451:12;5413:52;5501:9;5488:23;5530:18;5571:2;5563:6;5560:14;5557:34;;;5587:1;5584;5577:12;5557:34;5625:6;5614:9;5610:22;5600:32;;5670:7;5663:4;5659:2;5655:13;5651:27;5641:55;;5692:1;5689;5682:12;5641:55;5728:2;5715:16;5750:4;5773:43;5813:2;5773:43;:::i;:::-;5845:2;5839:9;5857:31;5885:2;5877:6;5857:31;:::i;:::-;5923:18;;;6011:1;6007:10;;;;5999:19;;5995:28;;;5957:15;;;;-1:-1:-1;6035:19:39;;;6032:39;;;6067:1;6064;6057:12;6032:39;6091:11;;;;6111:148;6127:6;6122:3;6119:15;6111:148;;;6193:23;6212:3;6193:23;:::i;:::-;6181:36;;6144:12;;;;6237;;;;6111:148;;;6278:6;-1:-1:-1;;6322:18:39;;6309:32;;-1:-1:-1;;6353:16:39;;;6350:36;;;6382:1;6379;6372:12;6350:36;;6405:63;6460:7;6449:8;6438:9;6434:24;6405:63;:::i;:::-;6395:73;;;5266:1208;;;;;:::o;6479:435::-;6532:3;6570:5;6564:12;6597:6;6592:3;6585:19;6623:4;6652:2;6647:3;6643:12;6636:19;;6689:2;6682:5;6678:14;6710:1;6720:169;6734:6;6731:1;6728:13;6720:169;;;6795:13;;6783:26;;6829:12;;;;6864:15;;;;6756:1;6749:9;6720:169;;;-1:-1:-1;6905:3:39;;6479:435;-1:-1:-1;;;;;6479:435:39:o;6919:261::-;7098:2;7087:9;7080:21;7061:4;7118:56;7170:2;7159:9;7155:18;7147:6;7118:56;:::i;7185:388::-;7262:6;7270;7323:2;7311:9;7302:7;7298:23;7294:32;7291:52;;;7339:1;7336;7329:12;7291:52;7375:9;7362:23;7352:33;;7436:2;7425:9;7421:18;7408:32;7463:18;7455:6;7452:30;7449:50;;;7495:1;7492;7485:12;7449:50;7518:49;7559:7;7550:6;7539:9;7535:22;7518:49;:::i;7809:347::-;7874:6;7882;7935:2;7923:9;7914:7;7910:23;7906:32;7903:52;;;7951:1;7948;7941:12;7903:52;7974:29;7993:9;7974:29;:::i;:::-;7964:39;;8053:2;8042:9;8038:18;8025:32;8100:5;8093:13;8086:21;8079:5;8076:32;8066:60;;8122:1;8119;8112:12;8066:60;8145:5;8135:15;;;7809:347;;;;;:::o;8161:637::-;8396:6;8390:13;8379:9;8372:32;8460:4;8452:6;8448:17;8442:24;8435:4;8424:9;8420:20;8413:54;8537:4;8529:6;8525:17;8519:24;8512:32;8505:40;8498:4;8487:9;8483:20;8476:70;8602:4;8594:6;8590:17;8584:24;8577:4;8566:9;8562:20;8555:54;8679:4;8671:6;8667:17;8661:24;8654:32;8647:40;8640:4;8629:9;8625:20;8618:70;8725:3;8719;8708:9;8704:19;8697:32;8353:4;8746:46;8787:3;8776:9;8772:19;8764:6;8746:46;:::i;:::-;8738:54;8161:637;-1:-1:-1;;;;8161:637:39:o;8803:260::-;8871:6;8879;8932:2;8920:9;8911:7;8907:23;8903:32;8900:52;;;8948:1;8945;8938:12;8900:52;8971:29;8990:9;8971:29;:::i;:::-;8961:39;;9019:38;9053:2;9042:9;9038:18;9019:38;:::i;:::-;9009:48;;8803:260;;;;;:::o;9068:606::-;9172:6;9180;9188;9196;9204;9257:3;9245:9;9236:7;9232:23;9228:33;9225:53;;;9274:1;9271;9264:12;9225:53;9297:29;9316:9;9297:29;:::i;:::-;9287:39;;9345:38;9379:2;9368:9;9364:18;9345:38;:::i;:::-;9335:48;;9430:2;9419:9;9415:18;9402:32;9392:42;;9481:2;9470:9;9466:18;9453:32;9443:42;;9536:3;9525:9;9521:19;9508:33;9564:18;9556:6;9553:30;9550:50;;;9596:1;9593;9586:12;9550:50;9619:49;9660:7;9651:6;9640:9;9636:22;9619:49;:::i;9679:186::-;9738:6;9791:2;9779:9;9770:7;9766:23;9762:32;9759:52;;;9807:1;9804;9797:12;9759:52;9830:29;9849:9;9830:29;:::i;10281:184::-;10351:6;10404:2;10392:9;10383:7;10379:23;10375:32;10372:52;;;10420:1;10417;10410:12;10372:52;-1:-1:-1;10443:16:39;;10281:184;-1:-1:-1;10281:184:39:o;10659:::-;10711:77;10708:1;10701:88;10808:4;10805:1;10798:15;10832:4;10829:1;10822:15;10848:274;10888:1;10914;10904:189;;10949:77;10946:1;10939:88;11050:4;11047:1;11040:15;11078:4;11075:1;11068:15;10904:189;-1:-1:-1;11107:9:39;;10848:274::o;11127:780::-;11479:34;11474:3;11467:47;11544:34;11539:2;11534:3;11530:12;11523:56;11609:34;11604:2;11599:3;11595:12;11588:56;11674:6;11669:2;11664:3;11660:12;11653:28;11449:3;11710:6;11704:13;11726:74;11793:6;11787:3;11782;11778:13;11773:2;11765:6;11761:15;11726:74;:::i;:::-;11865:7;11859:3;11819:16;;;;11851:12;;;11844:29;-1:-1:-1;11897:3:39;11889:12;;11127:780;-1:-1:-1;11127:780:39:o;11912:125::-;11977:9;;;11998:10;;;11995:36;;;12011:18;;:::i;12042:195::-;12081:3;12112:66;12105:5;12102:77;12099:103;;12182:18;;:::i;:::-;-1:-1:-1;12229:1:39;12218:13;;12042:195::o;13067:184::-;13119:77;13116:1;13109:88;13216:4;13213:1;13206:15;13240:4;13237:1;13230:15;13256:128;13323:9;;;13344:11;;;13341:37;;;13358:18;;:::i;14523:228::-;14563:7;14689:1;14621:66;14617:74;14614:1;14611:81;14606:1;14599:9;14592:17;14588:105;14585:131;;;14696:18;;:::i;:::-;-1:-1:-1;14736:9:39;;14523:228::o;14756:437::-;14835:1;14831:12;;;;14878;;;14899:61;;14953:4;14945:6;14941:17;14931:27;;14899:61;15006:2;14998:6;14995:14;14975:18;14972:38;14969:218;;15043:77;15040:1;15033:88;15144:4;15141:1;15134:15;15172:4;15169:1;15162:15;15323:1019;15430:4;15459:2;15488;15477:9;15470:21;15511:1;15544:6;15538:13;15574:36;15600:9;15574:36;:::i;:::-;15646:6;15641:2;15630:9;15626:18;15619:34;15672:2;15693:1;15725:2;15714:9;15710:18;15742:1;15737:216;;;;15967:1;15962:354;;;;15703:613;;15737:216;15800:66;15789:9;15785:82;15780:2;15769:9;15765:18;15758:110;15940:2;15928:6;15921:14;15914:22;15911:1;15907:30;15896:9;15892:46;15888:55;15881:62;;15737:216;;15962:354;15993:6;15990:1;15983:17;16041:2;16038:1;16028:16;16066:1;16080:180;16094:6;16091:1;16088:13;16080:180;;;16187:14;;16163:17;;;16159:26;;16152:50;16230:16;;;;16109:10;;16080:180;;;16284:17;;16280:26;;;-1:-1:-1;;15703:613:39;-1:-1:-1;16333:3:39;;15323:1019;-1:-1:-1;;;;;;;;15323:1019:39:o;16347:544::-;16448:2;16443:3;16440:11;16437:448;;;16484:1;16509:5;16505:2;16498:17;16554:4;16550:2;16540:19;16624:2;16612:10;16608:19;16605:1;16601:27;16595:4;16591:38;16660:4;16648:10;16645:20;16642:47;;;-1:-1:-1;16683:4:39;16642:47;16738:2;16733:3;16729:12;16726:1;16722:20;16716:4;16712:31;16702:41;;16793:82;16811:2;16804:5;16801:13;16793:82;;;16856:17;;;16837:1;16826:13;16793:82;;16437:448;16347:544;;;:::o;17127:1467::-;17251:3;17245:10;17278:18;17270:6;17267:30;17264:56;;;17300:18;;:::i;:::-;17329:96;17418:6;17378:38;17410:4;17404:11;17378:38;:::i;:::-;17372:4;17329:96;:::i;:::-;17480:4;;17544:2;17533:14;;17561:1;17556:781;;;;18381:1;18398:6;18395:89;;;-1:-1:-1;18450:19:39;;;18444:26;18395:89;17033:66;17024:1;17020:11;;;17016:84;17012:89;17002:100;17108:1;17104:11;;;16999:117;18497:81;;17526:1062;;17556:781;15270:1;15263:14;;;15307:4;15294:18;;17604:66;17592:79;;;17768:236;17782:7;17779:1;17776:14;17768:236;;;17871:19;;;17865:26;17850:42;;17963:27;;;;17931:1;17919:14;;;;17798:19;;17768:236;;;17772:3;18032:6;18023:7;18020:19;18017:261;;;18093:19;;;18087:26;18194:66;18176:1;18172:14;;;18188:3;18168:24;18164:97;18160:102;18145:118;18130:134;;18017:261;-1:-1:-1;;;;;18324:1:39;18308:14;;;18304:22;18291:36;;-1:-1:-1;17127:1467:39:o;20846:465::-;21103:2;21092:9;21085:21;21066:4;21129:56;21181:2;21170:9;21166:18;21158:6;21129:56;:::i;:::-;21233:9;21225:6;21221:22;21216:2;21205:9;21201:18;21194:50;21261:44;21298:6;21290;21261:44;:::i;:::-;21253:52;20846:465;-1:-1:-1;;;;;20846:465:39:o;23149:287::-;23278:3;23316:6;23310:13;23332:66;23391:6;23386:3;23379:4;23371:6;23367:17;23332:66;:::i;:::-;23414:16;;;;;23149:287;-1:-1:-1;;23149:287:39:o;24260:850::-;24582:4;24611:42;24692:2;24684:6;24680:15;24669:9;24662:34;24744:2;24736:6;24732:15;24727:2;24716:9;24712:18;24705:43;;24784:3;24779:2;24768:9;24764:18;24757:31;24811:57;24863:3;24852:9;24848:19;24840:6;24811:57;:::i;:::-;24916:9;24908:6;24904:22;24899:2;24888:9;24884:18;24877:50;24950:44;24987:6;24979;24950:44;:::i;:::-;24936:58;;25043:9;25035:6;25031:22;25025:3;25014:9;25010:19;25003:51;25071:33;25097:6;25089;25071:33;:::i;:::-;25063:41;24260:850;-1:-1:-1;;;;;;;;24260:850:39:o;25115:249::-;25184:6;25237:2;25225:9;25216:7;25212:23;25208:32;25205:52;;;25253:1;25250;25243:12;25205:52;25285:9;25279:16;25304:30;25328:5;25304:30;:::i;25369:179::-;25404:3;25446:1;25428:16;25425:23;25422:120;;;25492:1;25489;25486;25471:23;-1:-1:-1;25529:1:39;25523:8;25518:3;25514:18;25422:120;25369:179;:::o;25553:731::-;25592:3;25634:4;25616:16;25613:26;25610:39;;;25553:731;:::o;25610:39::-;25676:2;25670:9;25698:66;25819:2;25801:16;25797:25;25794:1;25788:4;25773:50;25852:4;25846:11;25876:16;25911:18;25982:2;25975:4;25967:6;25963:17;25960:25;25955:2;25947:6;25944:14;25941:45;25938:58;;;25989:5;;;;;25553:731;:::o;25938:58::-;26026:6;26020:4;26016:17;26005:28;;26062:3;26056:10;26089:2;26081:6;26078:14;26075:27;;;26095:5;;;;;;25553:731;:::o;26075:27::-;26179:2;26160:16;26154:4;26150:27;26146:36;26139:4;26130:6;26125:3;26121:16;26117:27;26114:69;26111:82;;;26186:5;;;;;;25553:731;:::o;26111:82::-;26202:57;26253:4;26244:6;26236;26232:19;26228:30;26222:4;26202:57;:::i;:::-;-1:-1:-1;26275:3:39;;25553:731;-1:-1:-1;;;;;25553:731:39:o;27521:584::-;27743:4;27772:42;27853:2;27845:6;27841:15;27830:9;27823:34;27905:2;27897:6;27893:15;27888:2;27877:9;27873:18;27866:43;;27945:6;27940:2;27929:9;27925:18;27918:34;27988:6;27983:2;27972:9;27968:18;27961:34;28032:3;28026;28015:9;28011:19;28004:32;28053:46;28094:3;28083:9;28079:19;28071:6;28053:46;:::i;:::-;28045:54;27521:584;-1:-1:-1;;;;;;;27521:584:39:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "changeETHLimit(uint256)": "b1251026",
    "closeSoloVault()": "63b613f2",
    "contractURI()": "e8a3d485",
    "exists(uint256)": "4f558e79",
    "getAvailableRPLStake()": "9fe8d3aa",
    "getBalance()": "12065fe0",
    "getCurrentEthLimit()": "354228be",
    "getMetadata(uint256)": "a574cea4",
    "getReqRPLStake()": "02943854",
    "getTokenID()": "6ba367a3",
    "hasNodeEnoughRPLStake()": "66f9fa3a",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isVaultOpen()": "ec36d35e",
    "name()": "06fdde03",
    "openSoloVault()": "f9d7afd7",
    "owner()": "8da5cb5b",
    "renounceOwnership()": "715018a6",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setBlockscapeRocketPoolNode(address)": "f6b76685",
    "setWithdrawFee(uint256)": "b6ac642a",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "totalSupply(uint256)": "bd85b039",
    "transferOwnership(address)": "f2fde38b",
    "tryDepositSoloVault()": "70a383e0",
    "tryWithdrawBatch()": "f649b014",
    "updateValidator(uint256,bytes)": "8d8b7ca9",
    "uri(uint256)": "0e89341c",
    "userRequestWithdraw(uint256)": "6ea5ba1a",
    "viewUserRequestWithdraw(uint256)": "8776d1d7",
    "withdraw(uint256)": "2e1a7d4d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughRPLStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vali\",\"type\":\"bytes\"}],\"name\":\"ValidatorAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"ETHLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_availRPL\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredRPL\",\"type\":\"uint256\"}],\"name\":\"RPLStakeRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"RocketPoolNodeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakedETH\",\"type\":\"uint256\"}],\"name\":\"UserRequestedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_vali\",\"type\":\"bytes\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"changeETHLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSoloVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableRPLStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"institution\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"institutionName\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"institutionVerified\",\"type\":\"bool\"}],\"internalType\":\"struct BlockscapeSoloVaultGoerli.Metadata\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReqRPLStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasNodeEnoughRPLStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSoloVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlockscapeRocketPoolNode\",\"type\":\"address\"}],\"name\":\"setBlockscapeRocketPoolNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryDepositSoloVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryWithdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_vali\",\"type\":\"bytes\"}],\"name\":\"updateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"userRequestWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"viewUserRequestWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockscape Finance AG <info@blockscape.network>\",\"errors\":{\"NotEnoughRPLStake()\":[{\"details\":\"more RPL stake has to be done in order to open vault\"}]},\"events\":{\"ETHLimitChanged(uint256)\":{\"details\":\"event for when the ETH limit is changed\"},\"RPLStakeRequired(uint256,uint256)\":{\"details\":\"event for when a batch is tried to withdrawn but not enough rpl are available yet\"},\"RocketPoolNodeAddressChanged(address)\":{\"details\":\"event for when the RocketPool Node Address is changed\"},\"UserRequestedWithdrawal(uint256,address,uint256,uint256)\":{\"details\":\"event for when a user requests a withdrawal\"},\"ValidatorSet(bytes)\":{\"details\":\"event for when a\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"changeETHLimit(uint256)\":{\"params\":{\"_newLimit\":\"the new pool amount which has to be staked\"}},\"closeSoloVault()\":{\"details\":\"future staking interactions are prevented afterwards\"},\"constructor\":{\"details\":\"the IPNS makes sure the nfts stay reachable via this link while  new nfts get added to the underlying ipfs folder\"},\"contractURI()\":{\"details\":\"this path will never change as the contract defines a collection\",\"returns\":{\"_0\":\"the fixed collection metadata path \"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getAvailableRPLStake()\":{\"returns\":{\"_0\":\"the current available RPL stake with already deducted minimum stake\"}},\"getBalance()\":{\"returns\":{\"_0\":\"amount in wei\"}},\"getCurrentEthLimit()\":{\"returns\":{\"_0\":\"is depositing enabled\"}},\"getMetadata(uint256)\":{\"params\":{\"_tokenID\":\"identifies the pool\"},\"returns\":{\"_0\":\"Metadata of the pool \",\"_1\":\"the validator address\"}},\"getReqRPLStake()\":{\"details\":\"if the minipoollimit is `0` then the required stake is also `0`!\",\"returns\":{\"_0\":\"the RPLs needed\"}},\"getTokenID()\":{\"returns\":{\"_0\":\"the current tokenID \"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isVaultOpen()\":{\"details\":\"the backend controller will reopen then vault after the stake have been transferred\",\"returns\":{\"_0\":\"is depositing enabled\"}},\"openSoloVault()\":{\"details\":\"is triggered when the vault can be staked at rocketpool\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBlockscapeRocketPoolNode(address)\":{\"params\":{\"_newBlockscapeRocketPoolNode\":\"the new address of the pool node\"}},\"setWithdrawFee(uint256)\":{\"params\":{\"_amount\":\"the new fee in wei\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"total amount of staker\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"tryDepositSoloVault()\":{\"details\":\"the vault must be open and equal the depositing amount\"},\"updateValidator(uint256,bytes)\":{\"details\":\"works only once and emits, then reverts\",\"params\":{\"_tokenID\":\"Identifier of the vault\",\"_vali\":\"the current address of the validator\"}},\"uri(uint256)\":{\"params\":{\"_tokenID\":\"the pool\"},\"returns\":{\"_0\":\"the url\"}},\"userRequestWithdraw(uint256)\":{\"params\":{\"_tokenID\":\"which pool the staker wants to unstake\"},\"returns\":{\"_amount\":\"how much the user gets back\"}},\"viewUserRequestWithdraw(uint256)\":{\"params\":{\"_tokenID\":\"which pool the staker wants to unstake\"},\"returns\":{\"_amount\":\"how much the user would pay on fees\"}},\"withdraw(uint256)\":{\"details\":\"the withdraw function remains public as safety measurement to not lock-in client stakes in case of contract issues\",\"params\":{\"_amount\":\"the amount in wei to withdraw\"}}},\"stateVariables\":{\"allowPubDeposit\":{\"details\":\"is `false` when pool is full, will be reopened, as soon as  the backend controller withdraws & transfers the stake\"},\"rocketNodeStaking\":{\"details\":\"rocketpool contract interface for interactions\"},\"rocketNodeStakingAddress\":{\"details\":\"this is a given way to always retrieve the most up-to-date node address\"},\"rocketStorage\":{\"details\":\"RocketStorageInterface of rocketpool\"},\"tokenID\":{\"details\":\"the tokenID is the same as the tokenID of the pool (poolID)\"},\"tokenIDtoMetadata\":{\"details\":\"Mappings of tokenID to Metadata\"},\"tokenIDtoValidator\":{\"details\":\"Mappings of tokenID to Validator\"}},\"title\":\"Rocketpool Staking Allocation Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ValidatorAlreadySet(bytes)\":[{\"notice\":\"for a token the validator can only be set once otherwise revert with this error\"}]},\"kind\":\"user\",\"methods\":{\"changeETHLimit(uint256)\":{\"notice\":\"the limit might change in the future if rocketpool supports  smaller pool sizes\"},\"closeSoloVault()\":{\"notice\":\"is triggered when the vault can be staked at rocketpool\"},\"constructor\":{\"notice\":\"each pool related vault gets its separate tokenID which depicts  the nft for each staker\"},\"contractURI()\":{\"notice\":\"stake nft metdata location\"},\"getAvailableRPLStake()\":{\"notice\":\"show the currently available RPL stake which is needed to create  a pool on rocketscape\"},\"getBalance()\":{\"notice\":\"how much balance does this vault current have\"},\"getCurrentEthLimit()\":{\"notice\":\"the current depositing threshold\"},\"getMetadata(uint256)\":{\"notice\":\"gets the metadata of a given pool\"},\"getReqRPLStake()\":{\"notice\":\"calculates the required RPL needed to stake according to  poolsize\"},\"getTokenID()\":{\"notice\":\"the tokenID is incremented with every pool\"},\"hasNodeEnoughRPLStake()\":{\"notice\":\"has the node enough RPL to stake another minipool\"},\"isVaultOpen()\":{\"notice\":\"does the vault currently allow depositing\"},\"name()\":{\"notice\":\"Contract name\"},\"openSoloVault()\":{\"notice\":\"makes the vault stakable again after it has been closed\"},\"setBlockscapeRocketPoolNode(address)\":{\"notice\":\"gets used if rocket pool changes the address of their node\"},\"setWithdrawFee(uint256)\":{\"notice\":\"the withdraw fee might be changed in the future\"},\"symbol()\":{\"notice\":\"Contract symbol\"},\"totalSupply()\":{\"notice\":\"how many staker are there totally\"},\"tryDepositSoloVault()\":{\"notice\":\"used when staking eth into the contract\"},\"tryWithdrawBatch()\":{\"notice\":\"this gets triggered by the backend controller when the vault  is closed\"},\"updateValidator(uint256,bytes)\":{\"notice\":\"set validator address for given token id\"},\"uri(uint256)\":{\"notice\":\"gets the url to the metadata of a given pool\"},\"userRequestWithdraw(uint256)\":{\"notice\":\"used when user wants to unstake\"},\"viewUserRequestWithdraw(uint256)\":{\"notice\":\"how much fees would the user has to pay if he would unstake now within the first year of staking the fee is 20%, afterwards 0.5%\"},\"withdraw(uint256)\":{\"notice\":\"withdraw the given amount to the deployer, triggered when the  the backend controller moves the stake to rocketpool\"}},\"notice\":\"collects staking, mints NFT in return for staker and let's backend controller  transfer the stake when the pool is full (currently 16 ETH) and enough RPL are available\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BlockscapeSoloVaultGoerli.sol\":\"BlockscapeSoloVaultGoerli\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x80624c6edbd746d79801e14ec439156af772972f52528da5cab019ba965627cc\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5ed8a2e92f9a346c5d2a7c1b3e7cc640163929cb8e1c325d0453ccf274686c8f\",\"dweb:/ipfs/QmSciSaQ6g3Jb4BSK5DY5vNAFM1q1XZk3hbYY2N86AGT7w\"]},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xcf8e96732d76b4ab92bdd207b6774dff08d5bc65d222275b5f12bcd2bf0c6024\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c59722c0d706c6bdb307e7aa46060e0bb29c5897f113a4a751a8299648b85d7a\",\"dweb:/ipfs/QmQsJWG6oDvphNzaVPLT4ma5dkgo4MhSgiQd2nPqmQft4R\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"keccak256\":\"0xd0ce5c93dc4a4e78c2a2fa7b6bed0c42e3541791692e976ce723c137b19d58ef\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0761f78942c03a5b3ed22d4652fddd731aeb8963904d6cb171d9887a40954047\",\"dweb:/ipfs/QmS2Xqfm6zpBy4BjaNyLPQruhvBMWSMJazPSuPxtRiKM83\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"keccak256\":\"0xbad85de003e1c57b02ac5dc696b6681fed18974c1189f6afa15c3012b53bb2f1\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c2326250350017d49f47f1871dd59655d21a9b3b465ba26aee12c568210a1510\",\"dweb:/ipfs/QmWPm9yKtJ3FhqurEHWmzdTkPMdKzDSPKUPU6CS8iuHRGA\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"keccak256\":\"0xd36f0f545e78d3606dbdd4d1212bd3d5aad0e7e03de0c67a646923549d0fdb19\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d920bcc433df0fc2b109350ed96ad520c69a2bc2a5e9a8b5fc401bba6cdc3578\",\"dweb:/ipfs/QmVVepcDvbM9Jfh8vTmEYJt1tpbbxw7Sw7vvhySKbNh23o\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"keccak256\":\"0xb82f4a89e161c2060225896873e51cbd25fca2f926123299799ad4efac7e0fba\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0be4585b0e073781703974a4e836ae983b34761cfd89f4905fd19051203505d7\",\"dweb:/ipfs/QmdAn1g7cyPt89QG2mYoDibtHwQ7GmFEVS9ydEKAaPNAEs\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"keccak256\":\"0x2a87e35d54d9c688b1c2c57baa509ada98163c4f45d5bce98728c34d95a8c874\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5fe78a9e379f21e2521d190938e09adbb28971dc2a8ff21e8c9947ee080d17f6\",\"dweb:/ipfs/QmeWZRnVodorh6L5ByXBJi57NbgptU44pp31YpnpdDgviF\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xdf50c53dd630c34294482396206919741a59f86f50f953f430e0f7d5de340271\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3154ab33750ca8e22b67daf8c75628def7d60c2f40354cbf66831ef735a601d7\",\"dweb:/ipfs/QmfCTXNVFoEArk2PiZK9KWbQQ2HgvNhYtZqKKVV6y9ChoW\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xccec5bb843930ecee3858df0f7f027400f72ff93c59a5e44ca120d07e1129dee\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ac5fd17a7f3c98c54bc30f3a236424f2f7a720b578cd24a9ef5640ce2e3975f6\",\"dweb:/ipfs/Qmema3xzoKST19BiGyojVN6dYL9TN57qdjunXdFyfEKeWP\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x9faea797c75b0190cdec513c03e37e56597699fc9370a6e4999112e6aaf4e516\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9e269ac534eaf6ed7cae0d3a46172ca660eb421ba1be44f351d42eeb0b85c606\",\"dweb:/ipfs/QmYrmTSZWRHkSDoeAgxzVmAiHLbmGPQka81sPgp8kJp5wW\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x4589f620f74aa943a22453af42347cd7ab66a2524e695788921133b6b5ce3a47\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bad1b7f7b090767bc1e5ad5d5659efadeee9a06c893c882545bec7cc56619a57\",\"dweb:/ipfs/QmYpFrKQTVcubKCfGDY5tFaGQbAa62ZuvDfpt3R32u2V9M\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x9ea78c25a1585f72c73822d3e9cb8d9a0a66ec1a54e2dc2b2f714fa135a6afef\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://72ed14b7b517b8953efd1b14c9afed54e32b12f029decc1bbe3d33205bf2c8c9\",\"dweb:/ipfs/QmSMpuAwTf6J5ysioMJN2sDL2BECL4wcBxsQWiGbFpcFpp\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x56e77dab42aa895fe63b560080ad0f42d1ecdff9c1348a491d32f6328c6bc8ac\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d55b9b5ccbfa098416c1fe0814c40ea4b79c06ade0bd6f01ca62f1321b5b5d04\",\"dweb:/ipfs/QmfKmVX9rvCtb414z7YcUq23yVy829pTkx7CyH5WQdmERm\"]},\"src/BlockscapeSoloVaultGoerli.sol\":{\"keccak256\":\"0x539914194489d4efd95ee814a5253d460ddfc410942d1df6dd773a814b551ae4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://dc8a3b4b5613caa33cbda283e9fbb5c114f37bf90c6f2287eaedc512788953fe\",\"dweb:/ipfs/QmS38KU9xgsu9283f1cGGf15zgFWbbgNQNZmtQCAGxp67V\"]},\"src/utils/RocketNodeStakingInterface.sol\":{\"keccak256\":\"0x562ef87f2e518db7dbff2e06f0bf097675f478bcbf83198f8b285a41d2683f7f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fdb8742144c4d5641018dc9854606159d8cc6e9f65dc419223b54d31e13a4bc7\",\"dweb:/ipfs/QmUiQvZHvXXg3asYAB1YHGqkiw614UTa3Pe6hEW2eJAaRQ\"]},\"src/utils/RocketStorageInterface.sol\":{\"keccak256\":\"0xe80d7611be03e1b8256c02e19ff27f39041c3f2be25442e0f29eb93365ea8497\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://5f7a070b28c126e7fd051510d4fbe65619b4df755e5b50bd1ca562cc7c9bab2f\",\"dweb:/ipfs/Qmd96ioaCGpBHwBoAxvX33XguXH5bNpyGAyCR732kcr1T7\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotEnoughRPLStake"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_vali",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "ValidatorAlreadySet"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newLimit",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ETHLimitChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_availRPL",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_requiredRPL",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RPLStakeRequired",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newAddress",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RocketPoolNodeAddressChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "_user",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_stakedETH",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "UserRequestedWithdrawal",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_vali",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ValidatorSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newLimit",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeETHLimit"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "closeSoloVault"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "exists",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAvailableRPLStake",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCurrentEthLimit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getMetadata",
          "outputs": [
            {
              "internalType": "struct BlockscapeSoloVaultGoerli.Metadata",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stakedETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "institution",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "institutionName",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "institutionVerified",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReqRPLStake",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTokenID",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "hasNodeEnoughRPLStake",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "isVaultOpen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openSoloVault"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newBlockscapeRocketPoolNode",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setBlockscapeRocketPoolNode"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setWithdrawFee"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "tryDepositSoloVault"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "tryWithdrawBatch"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_vali",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateValidator"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "userRequestWithdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "viewUserRequestWithdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address,uint256)": {
            "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
          },
          "balanceOfBatch(address[],uint256[])": {
            "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
          },
          "changeETHLimit(uint256)": {
            "params": {
              "_newLimit": "the new pool amount which has to be staked"
            }
          },
          "closeSoloVault()": {
            "details": "future staking interactions are prevented afterwards"
          },
          "constructor": {
            "details": "the IPNS makes sure the nfts stay reachable via this link while  new nfts get added to the underlying ipfs folder"
          },
          "contractURI()": {
            "details": "this path will never change as the contract defines a collection",
            "returns": {
              "_0": "the fixed collection metadata path "
            }
          },
          "exists(uint256)": {
            "details": "Indicates whether any token exist with a given id, or not."
          },
          "getAvailableRPLStake()": {
            "returns": {
              "_0": "the current available RPL stake with already deducted minimum stake"
            }
          },
          "getBalance()": {
            "returns": {
              "_0": "amount in wei"
            }
          },
          "getCurrentEthLimit()": {
            "returns": {
              "_0": "is depositing enabled"
            }
          },
          "getMetadata(uint256)": {
            "params": {
              "_tokenID": "identifies the pool"
            },
            "returns": {
              "_0": "Metadata of the pool ",
              "_1": "the validator address"
            }
          },
          "getReqRPLStake()": {
            "details": "if the minipoollimit is `0` then the required stake is also `0`!",
            "returns": {
              "_0": "the RPLs needed"
            }
          },
          "getTokenID()": {
            "returns": {
              "_0": "the current tokenID "
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC1155-isApprovedForAll}."
          },
          "isVaultOpen()": {
            "details": "the backend controller will reopen then vault after the stake have been transferred",
            "returns": {
              "_0": "is depositing enabled"
            }
          },
          "openSoloVault()": {
            "details": "is triggered when the vault can be staked at rocketpool"
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            "details": "See {IERC1155-safeBatchTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            "details": "See {IERC1155-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC1155-setApprovalForAll}."
          },
          "setBlockscapeRocketPoolNode(address)": {
            "params": {
              "_newBlockscapeRocketPoolNode": "the new address of the pool node"
            }
          },
          "setWithdrawFee(uint256)": {
            "params": {
              "_amount": "the new fee in wei"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "totalSupply()": {
            "returns": {
              "_0": "total amount of staker"
            }
          },
          "totalSupply(uint256)": {
            "details": "Total amount of tokens in with a given id."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "tryDepositSoloVault()": {
            "details": "the vault must be open and equal the depositing amount"
          },
          "updateValidator(uint256,bytes)": {
            "details": "works only once and emits, then reverts",
            "params": {
              "_tokenID": "Identifier of the vault",
              "_vali": "the current address of the validator"
            }
          },
          "uri(uint256)": {
            "params": {
              "_tokenID": "the pool"
            },
            "returns": {
              "_0": "the url"
            }
          },
          "userRequestWithdraw(uint256)": {
            "params": {
              "_tokenID": "which pool the staker wants to unstake"
            },
            "returns": {
              "_amount": "how much the user gets back"
            }
          },
          "viewUserRequestWithdraw(uint256)": {
            "params": {
              "_tokenID": "which pool the staker wants to unstake"
            },
            "returns": {
              "_amount": "how much the user would pay on fees"
            }
          },
          "withdraw(uint256)": {
            "details": "the withdraw function remains public as safety measurement to not lock-in client stakes in case of contract issues",
            "params": {
              "_amount": "the amount in wei to withdraw"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "changeETHLimit(uint256)": {
            "notice": "the limit might change in the future if rocketpool supports  smaller pool sizes"
          },
          "closeSoloVault()": {
            "notice": "is triggered when the vault can be staked at rocketpool"
          },
          "constructor": {
            "notice": "each pool related vault gets its separate tokenID which depicts  the nft for each staker"
          },
          "contractURI()": {
            "notice": "stake nft metdata location"
          },
          "getAvailableRPLStake()": {
            "notice": "show the currently available RPL stake which is needed to create  a pool on rocketscape"
          },
          "getBalance()": {
            "notice": "how much balance does this vault current have"
          },
          "getCurrentEthLimit()": {
            "notice": "the current depositing threshold"
          },
          "getMetadata(uint256)": {
            "notice": "gets the metadata of a given pool"
          },
          "getReqRPLStake()": {
            "notice": "calculates the required RPL needed to stake according to  poolsize"
          },
          "getTokenID()": {
            "notice": "the tokenID is incremented with every pool"
          },
          "hasNodeEnoughRPLStake()": {
            "notice": "has the node enough RPL to stake another minipool"
          },
          "isVaultOpen()": {
            "notice": "does the vault currently allow depositing"
          },
          "name()": {
            "notice": "Contract name"
          },
          "openSoloVault()": {
            "notice": "makes the vault stakable again after it has been closed"
          },
          "setBlockscapeRocketPoolNode(address)": {
            "notice": "gets used if rocket pool changes the address of their node"
          },
          "setWithdrawFee(uint256)": {
            "notice": "the withdraw fee might be changed in the future"
          },
          "symbol()": {
            "notice": "Contract symbol"
          },
          "totalSupply()": {
            "notice": "how many staker are there totally"
          },
          "tryDepositSoloVault()": {
            "notice": "used when staking eth into the contract"
          },
          "tryWithdrawBatch()": {
            "notice": "this gets triggered by the backend controller when the vault  is closed"
          },
          "updateValidator(uint256,bytes)": {
            "notice": "set validator address for given token id"
          },
          "uri(uint256)": {
            "notice": "gets the url to the metadata of a given pool"
          },
          "userRequestWithdraw(uint256)": {
            "notice": "used when user wants to unstake"
          },
          "viewUserRequestWithdraw(uint256)": {
            "notice": "how much fees would the user has to pay if he would unstake now within the first year of staking the fee is 20%, afterwards 0.5%"
          },
          "withdraw(uint256)": {
            "notice": "withdraw the given amount to the deployer, triggered when the  the backend controller moves the stake to rocketpool"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/BlockscapeSoloVaultGoerli.sol": "BlockscapeSoloVaultGoerli"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0x80624c6edbd746d79801e14ec439156af772972f52528da5cab019ba965627cc",
        "urls": [
          "bzz-raw://5ed8a2e92f9a346c5d2a7c1b3e7cc640163929cb8e1c325d0453ccf274686c8f",
          "dweb:/ipfs/QmSciSaQ6g3Jb4BSK5DY5vNAFM1q1XZk3hbYY2N86AGT7w"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "keccak256": "0xcf8e96732d76b4ab92bdd207b6774dff08d5bc65d222275b5f12bcd2bf0c6024",
        "urls": [
          "bzz-raw://c59722c0d706c6bdb307e7aa46060e0bb29c5897f113a4a751a8299648b85d7a",
          "dweb:/ipfs/QmQsJWG6oDvphNzaVPLT4ma5dkgo4MhSgiQd2nPqmQft4R"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol": {
        "keccak256": "0xd0ce5c93dc4a4e78c2a2fa7b6bed0c42e3541791692e976ce723c137b19d58ef",
        "urls": [
          "bzz-raw://0761f78942c03a5b3ed22d4652fddd731aeb8963904d6cb171d9887a40954047",
          "dweb:/ipfs/QmS2Xqfm6zpBy4BjaNyLPQruhvBMWSMJazPSuPxtRiKM83"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xbad85de003e1c57b02ac5dc696b6681fed18974c1189f6afa15c3012b53bb2f1",
        "urls": [
          "bzz-raw://c2326250350017d49f47f1871dd59655d21a9b3b465ba26aee12c568210a1510",
          "dweb:/ipfs/QmWPm9yKtJ3FhqurEHWmzdTkPMdKzDSPKUPU6CS8iuHRGA"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0xd36f0f545e78d3606dbdd4d1212bd3d5aad0e7e03de0c67a646923549d0fdb19",
        "urls": [
          "bzz-raw://d920bcc433df0fc2b109350ed96ad520c69a2bc2a5e9a8b5fc401bba6cdc3578",
          "dweb:/ipfs/QmVVepcDvbM9Jfh8vTmEYJt1tpbbxw7Sw7vvhySKbNh23o"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
        "keccak256": "0xb82f4a89e161c2060225896873e51cbd25fca2f926123299799ad4efac7e0fba",
        "urls": [
          "bzz-raw://0be4585b0e073781703974a4e836ae983b34761cfd89f4905fd19051203505d7",
          "dweb:/ipfs/QmdAn1g7cyPt89QG2mYoDibtHwQ7GmFEVS9ydEKAaPNAEs"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
        "keccak256": "0x2a87e35d54d9c688b1c2c57baa509ada98163c4f45d5bce98728c34d95a8c874",
        "urls": [
          "bzz-raw://5fe78a9e379f21e2521d190938e09adbb28971dc2a8ff21e8c9947ee080d17f6",
          "dweb:/ipfs/QmeWZRnVodorh6L5ByXBJi57NbgptU44pp31YpnpdDgviF"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xdf50c53dd630c34294482396206919741a59f86f50f953f430e0f7d5de340271",
        "urls": [
          "bzz-raw://3154ab33750ca8e22b67daf8c75628def7d60c2f40354cbf66831ef735a601d7",
          "dweb:/ipfs/QmfCTXNVFoEArk2PiZK9KWbQQ2HgvNhYtZqKKVV6y9ChoW"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xccec5bb843930ecee3858df0f7f027400f72ff93c59a5e44ca120d07e1129dee",
        "urls": [
          "bzz-raw://ac5fd17a7f3c98c54bc30f3a236424f2f7a720b578cd24a9ef5640ce2e3975f6",
          "dweb:/ipfs/Qmema3xzoKST19BiGyojVN6dYL9TN57qdjunXdFyfEKeWP"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0x9faea797c75b0190cdec513c03e37e56597699fc9370a6e4999112e6aaf4e516",
        "urls": [
          "bzz-raw://9e269ac534eaf6ed7cae0d3a46172ca660eb421ba1be44f351d42eeb0b85c606",
          "dweb:/ipfs/QmYrmTSZWRHkSDoeAgxzVmAiHLbmGPQka81sPgp8kJp5wW"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x4589f620f74aa943a22453af42347cd7ab66a2524e695788921133b6b5ce3a47",
        "urls": [
          "bzz-raw://bad1b7f7b090767bc1e5ad5d5659efadeee9a06c893c882545bec7cc56619a57",
          "dweb:/ipfs/QmYpFrKQTVcubKCfGDY5tFaGQbAa62ZuvDfpt3R32u2V9M"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x9ea78c25a1585f72c73822d3e9cb8d9a0a66ec1a54e2dc2b2f714fa135a6afef",
        "urls": [
          "bzz-raw://72ed14b7b517b8953efd1b14c9afed54e32b12f029decc1bbe3d33205bf2c8c9",
          "dweb:/ipfs/QmSMpuAwTf6J5ysioMJN2sDL2BECL4wcBxsQWiGbFpcFpp"
        ],
        "license": "BUSL-1.1"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0x56e77dab42aa895fe63b560080ad0f42d1ecdff9c1348a491d32f6328c6bc8ac",
        "urls": [
          "bzz-raw://d55b9b5ccbfa098416c1fe0814c40ea4b79c06ade0bd6f01ca62f1321b5b5d04",
          "dweb:/ipfs/QmfKmVX9rvCtb414z7YcUq23yVy829pTkx7CyH5WQdmERm"
        ],
        "license": "BUSL-1.1"
      },
      "src/BlockscapeSoloVaultGoerli.sol": {
        "keccak256": "0x539914194489d4efd95ee814a5253d460ddfc410942d1df6dd773a814b551ae4",
        "urls": [
          "bzz-raw://dc8a3b4b5613caa33cbda283e9fbb5c114f37bf90c6f2287eaedc512788953fe",
          "dweb:/ipfs/QmS38KU9xgsu9283f1cGGf15zgFWbbgNQNZmtQCAGxp67V"
        ],
        "license": "BUSL-1.1"
      },
      "src/utils/RocketNodeStakingInterface.sol": {
        "keccak256": "0x562ef87f2e518db7dbff2e06f0bf097675f478bcbf83198f8b285a41d2683f7f",
        "urls": [
          "bzz-raw://fdb8742144c4d5641018dc9854606159d8cc6e9f65dc419223b54d31e13a4bc7",
          "dweb:/ipfs/QmUiQvZHvXXg3asYAB1YHGqkiw614UTa3Pe6hEW2eJAaRQ"
        ],
        "license": "GPL-3.0-only"
      },
      "src/utils/RocketStorageInterface.sol": {
        "keccak256": "0xe80d7611be03e1b8256c02e19ff27f39041c3f2be25442e0f29eb93365ea8497",
        "urls": [
          "bzz-raw://5f7a070b28c126e7fd051510d4fbe65619b4df755e5b50bd1ca562cc7c9bab2f",
          "dweb:/ipfs/Qmd96ioaCGpBHwBoAxvX33XguXH5bNpyGAyCR732kcr1T7"
        ],
        "license": "GPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/BlockscapeSoloVaultGoerli.sol",
    "id": 31244,
    "exportedSymbols": {
      "Address": [
        26835
      ],
      "BlockscapeSoloVaultGoerli": [
        31243
      ],
      "Context": [
        26857
      ],
      "ERC1155": [
        26170
      ],
      "ERC1155Supply": [
        26490
      ],
      "ERC165": [
        27056
      ],
      "IERC1155": [
        26292
      ],
      "IERC1155MetadataURI": [
        26505
      ],
      "IERC1155Receiver": [
        26333
      ],
      "IERC165": [
        27068
      ],
      "Math": [
        27934
      ],
      "Ownable": [
        24882
      ],
      "ReentrancyGuard": [
        24947
      ],
      "RocketNodeStakingInterface": [
        31367
      ],
      "RocketStorageInterface": [
        31563
      ],
      "Strings": [
        27032
      ],
      "console": [
        16510
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:15759:32",
    "nodes": [
      {
        "id": 30534,
        "nodeType": "PragmaDirective",
        "src": "37:24:32",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 30536,
        "nodeType": "ImportDirective",
        "src": "63:46:32",
        "nodes": [],
        "absolutePath": "lib/forge-std/src/console.sol",
        "file": "forge-std/console.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 16511,
        "symbolAliases": [
          {
            "foreign": {
              "id": 30535,
              "name": "console",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 16510,
              "src": "71:7:32",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 30537,
        "nodeType": "ImportDirective",
        "src": "111:58:32",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        "file": "openzeppelin-contracts/token/ERC1155/ERC1155.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 26171,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30538,
        "nodeType": "ImportDirective",
        "src": "170:75:32",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol",
        "file": "openzeppelin-contracts/token/ERC1155/extensions/ERC1155Supply.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 26491,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30539,
        "nodeType": "ImportDirective",
        "src": "246:61:32",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "file": "openzeppelin-contracts/security/ReentrancyGuard.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 24948,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30540,
        "nodeType": "ImportDirective",
        "src": "308:51:32",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "openzeppelin-contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 24883,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30541,
        "nodeType": "ImportDirective",
        "src": "360:50:32",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "file": "openzeppelin-contracts/utils/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 27033,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30542,
        "nodeType": "ImportDirective",
        "src": "412:44:32",
        "nodes": [],
        "absolutePath": "src/utils/RocketStorageInterface.sol",
        "file": "./utils/RocketStorageInterface.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 31564,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 30543,
        "nodeType": "ImportDirective",
        "src": "457:48:32",
        "nodes": [],
        "absolutePath": "src/utils/RocketNodeStakingInterface.sol",
        "file": "./utils/RocketNodeStakingInterface.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 31244,
        "sourceUnit": 31368,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 31243,
        "nodeType": "ContractDefinition",
        "src": "809:14986:32",
        "nodes": [
          {
            "id": 30557,
            "nodeType": "VariableDeclaration",
            "src": "943:122:32",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 30551,
              "nodeType": "StructuredDocumentation",
              "src": "893:45:32",
              "text": "@dev RocketStorageInterface of rocketpool"
            },
            "mutability": "constant",
            "name": "rocketStorage",
            "nameLocation": "975:13:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_RocketStorageInterface_$31563",
              "typeString": "contract RocketStorageInterface"
            },
            "typeName": {
              "id": 30553,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 30552,
                "name": "RocketStorageInterface",
                "nameLocations": [
                  "943:22:32"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 31563,
                "src": "943:22:32"
              },
              "referencedDeclaration": 31563,
              "src": "943:22:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RocketStorageInterface_$31563",
                "typeString": "contract RocketStorageInterface"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307864384364343732363334313461464563613632643665326133393137643636303061624463654233",
                  "id": 30555,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1022:42:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0xd8Cd47263414aFEca62d6e2a3917d6600abDceB3"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 30554,
                "name": "RocketStorageInterface",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 31563,
                "src": "999:22:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_RocketStorageInterface_$31563_$",
                  "typeString": "type(contract RocketStorageInterface)"
                }
              },
              "id": 30556,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "999:66:32",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RocketStorageInterface_$31563",
                "typeString": "contract RocketStorageInterface"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 30561,
            "nodeType": "VariableDeclaration",
            "src": "1102:58:32",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 30558,
              "nodeType": "StructuredDocumentation",
              "src": "1072:25:32",
              "text": "@notice Contract name"
            },
            "functionSelector": "06fdde03",
            "mutability": "constant",
            "name": "name",
            "nameLocation": "1125:4:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 30559,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1102:6:32",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "426c6f636b736361706520536f6c6f205661756c74204e465473",
              "id": 30560,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1132:28:32",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_ce7e2842c9edf87c6cef6c2156ed40ba5e345b3931f54cccc1b9c8b372548688",
                "typeString": "literal_string \"Blockscape Solo Vault NFTs\""
              },
              "value": "Blockscape Solo Vault NFTs"
            },
            "visibility": "public"
          },
          {
            "id": 30565,
            "nodeType": "VariableDeclaration",
            "src": "1199:37:32",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 30562,
              "nodeType": "StructuredDocumentation",
              "src": "1167:27:32",
              "text": "@notice Contract symbol"
            },
            "functionSelector": "95d89b41",
            "mutability": "constant",
            "name": "symbol",
            "nameLocation": "1222:6:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 30563,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1199:6:32",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "425356",
              "id": 30564,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1231:5:32",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_461172c92cee5274f34826f70861578ee76ece078643ef285832ecdd4c053844",
                "typeString": "literal_string \"BSV\""
              },
              "value": "BSV"
            },
            "visibility": "public"
          },
          {
            "id": 30569,
            "nodeType": "VariableDeclaration",
            "src": "1295:85:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30566,
              "nodeType": "StructuredDocumentation",
              "src": "1243:47:32",
              "text": "@notice Blockscape Rocket Pool Node Address"
            },
            "mutability": "mutable",
            "name": "blockscapeRocketPoolNode",
            "nameLocation": "1303:24:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 30567,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1295:7:32",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307866306432324462393144453531366234346535633937364637314533393463396163393765363435",
              "id": 30568,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1338:42:32",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xf0d22Db91DE516b44e5c976F71E394c9ac97e645"
            },
            "visibility": "internal"
          },
          {
            "id": 30573,
            "nodeType": "VariableDeclaration",
            "src": "1431:34:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30570,
              "nodeType": "StructuredDocumentation",
              "src": "1387:39:32",
              "text": "@notice Current inital Withdraw Fee"
            },
            "mutability": "mutable",
            "name": "initWithdrawFee",
            "nameLocation": "1439:15:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 30571,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1431:7:32",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3230",
              "id": 30572,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1457:8:32",
              "subdenomination": "ether",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_20000000000000000000_by_1",
                "typeString": "int_const 20000000000000000000"
              },
              "value": "20"
            },
            "visibility": "internal"
          },
          {
            "id": 30577,
            "nodeType": "VariableDeclaration",
            "src": "1522:30:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30574,
              "nodeType": "StructuredDocumentation",
              "src": "1472:45:32",
              "text": "@notice Current Rocketpool Minipool Limit"
            },
            "mutability": "mutable",
            "name": "curETHlimit",
            "nameLocation": "1530:11:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 30575,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1522:7:32",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3136",
              "id": 30576,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1544:8:32",
              "subdenomination": "ether",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_16000000000000000000_by_1",
                "typeString": "int_const 16000000000000000000"
              },
              "value": "16"
            },
            "visibility": "internal"
          },
          {
            "id": 30581,
            "nodeType": "VariableDeclaration",
            "src": "1755:28:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30578,
              "nodeType": "StructuredDocumentation",
              "src": "1559:191:32",
              "text": "@notice state of the Solo Vault Pool\n@dev is `false` when pool is full, will be reopened, as soon as \nthe backend controller withdraws & transfers the stake"
            },
            "mutability": "mutable",
            "name": "allowPubDeposit",
            "nameLocation": "1760:15:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 30579,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1755:4:32",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 30580,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1778:5:32",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "internal"
          },
          {
            "id": 30585,
            "nodeType": "VariableDeclaration",
            "src": "1911:21:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30582,
              "nodeType": "StructuredDocumentation",
              "src": "1790:116:32",
              "text": "@notice initial tokenID\n@dev the tokenID is the same as the tokenID of the pool (poolID)"
            },
            "mutability": "mutable",
            "name": "tokenID",
            "nameLocation": "1919:7:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 30583,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1911:7:32",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "343030",
              "id": 30584,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1929:3:32",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_400_by_1",
                "typeString": "int_const 400"
              },
              "value": "400"
            },
            "visibility": "internal"
          },
          {
            "id": 30598,
            "nodeType": "VariableDeclaration",
            "src": "2023:159:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30586,
              "nodeType": "StructuredDocumentation",
              "src": "1938:80:32",
              "text": "@dev this is a given way to always retrieve the most up-to-date node address"
            },
            "mutability": "mutable",
            "name": "rocketNodeStakingAddress",
            "nameLocation": "2031:24:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 30587,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2023:7:32",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "hexValue": "636f6e74726163742e61646472657373",
                          "id": 30593,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2131:18:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_b86ec11852586a041fafc4775b679e5f136167d6f6d0dec7dace53c72fdac064",
                            "typeString": "literal_string \"contract.address\""
                          },
                          "value": "contract.address"
                        },
                        {
                          "hexValue": "726f636b65744e6f64655374616b696e67",
                          "id": 30594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2151:19:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_ee687a6ce1ef040844cb11ecf02735c7ba426347e21292cb1983a2fbda22fd8a",
                            "typeString": "literal_string \"rocketNodeStaking\""
                          },
                          "value": "rocketNodeStaking"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_b86ec11852586a041fafc4775b679e5f136167d6f6d0dec7dace53c72fdac064",
                            "typeString": "literal_string \"contract.address\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_ee687a6ce1ef040844cb11ecf02735c7ba426347e21292cb1983a2fbda22fd8a",
                            "typeString": "literal_string \"rocketNodeStaking\""
                          }
                        ],
                        "expression": {
                          "id": 30591,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -1,
                          "src": "2114:3:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 30592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2118:12:32",
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "src": "2114:16:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 30595,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2114:57:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    ],
                    "id": 30590,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": -8,
                    "src": "2104:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                      "typeString": "function (bytes memory) pure returns (bytes32)"
                    }
                  },
                  "id": 30596,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "nameLocations": [],
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "2104:68:32",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "expression": {
                  "id": 30588,
                  "name": "rocketStorage",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 30557,
                  "src": "2066:13:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_RocketStorageInterface_$31563",
                    "typeString": "contract RocketStorageInterface"
                  }
                },
                "id": 30589,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberLocation": "2080:10:32",
                "memberName": "getAddress",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 31394,
                "src": "2066:24:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                  "typeString": "function (bytes32) view external returns (address)"
                }
              },
              "id": 30597,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2066:116:32",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 30605,
            "nodeType": "VariableDeclaration",
            "src": "2248:107:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30599,
              "nodeType": "StructuredDocumentation",
              "src": "2188:55:32",
              "text": "@dev rocketpool contract interface for interactions"
            },
            "mutability": "mutable",
            "name": "rocketNodeStaking",
            "nameLocation": "2275:17:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
              "typeString": "contract RocketNodeStakingInterface"
            },
            "typeName": {
              "id": 30601,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 30600,
                "name": "RocketNodeStakingInterface",
                "nameLocations": [
                  "2248:26:32"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 31367,
                "src": "2248:26:32"
              },
              "referencedDeclaration": 31367,
              "src": "2248:26:32",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                "typeString": "contract RocketNodeStakingInterface"
              }
            },
            "value": {
              "arguments": [
                {
                  "id": 30603,
                  "name": "rocketNodeStakingAddress",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 30598,
                  "src": "2330:24:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 30602,
                "name": "RocketNodeStakingInterface",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 31367,
                "src": "2303:26:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_RocketNodeStakingInterface_$31367_$",
                  "typeString": "type(contract RocketNodeStakingInterface)"
                }
              },
              "id": 30604,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "typeConversion",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2303:52:32",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                "typeString": "contract RocketNodeStakingInterface"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 30616,
            "nodeType": "StructDefinition",
            "src": "2391:176:32",
            "nodes": [],
            "canonicalName": "BlockscapeSoloVaultGoerli.Metadata",
            "members": [
              {
                "constant": false,
                "id": 30607,
                "mutability": "mutable",
                "name": "stakedETH",
                "nameLocation": "2425:9:32",
                "nodeType": "VariableDeclaration",
                "scope": 30616,
                "src": "2417:17:32",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 30606,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2417:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30609,
                "mutability": "mutable",
                "name": "stakedTimestamp",
                "nameLocation": "2452:15:32",
                "nodeType": "VariableDeclaration",
                "scope": 30616,
                "src": "2444:23:32",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 30608,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2444:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30611,
                "mutability": "mutable",
                "name": "institution",
                "nameLocation": "2482:11:32",
                "nodeType": "VariableDeclaration",
                "scope": 30616,
                "src": "2477:16:32",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 30610,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2477:4:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30613,
                "mutability": "mutable",
                "name": "institutionName",
                "nameLocation": "2511:15:32",
                "nodeType": "VariableDeclaration",
                "scope": 30616,
                "src": "2503:23:32",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 30612,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2503:7:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30615,
                "mutability": "mutable",
                "name": "institutionVerified",
                "nameLocation": "2541:19:32",
                "nodeType": "VariableDeclaration",
                "scope": 30616,
                "src": "2536:24:32",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 30614,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2536:4:32",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Metadata",
            "nameLocation": "2398:8:32",
            "scope": 31243,
            "visibility": "public"
          },
          {
            "id": 30622,
            "nodeType": "VariableDeclaration",
            "src": "2618:46:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30617,
              "nodeType": "StructuredDocumentation",
              "src": "2573:40:32",
              "text": "@dev Mappings of tokenID to Metadata"
            },
            "mutability": "mutable",
            "name": "tokenIDtoMetadata",
            "nameLocation": "2647:17:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
              "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata)"
            },
            "typeName": {
              "id": 30621,
              "keyType": {
                "id": 30618,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2626:7:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2618:28:32",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
                "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata)"
              },
              "valueType": {
                "id": 30620,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 30619,
                  "name": "Metadata",
                  "nameLocations": [
                    "2637:8:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 30616,
                  "src": "2637:8:32"
                },
                "referencedDeclaration": 30616,
                "src": "2637:8:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Metadata_$30616_storage_ptr",
                  "typeString": "struct BlockscapeSoloVaultGoerli.Metadata"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 30627,
            "nodeType": "VariableDeclaration",
            "src": "2810:44:32",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 30623,
              "nodeType": "StructuredDocumentation",
              "src": "2764:41:32",
              "text": "@dev Mappings of tokenID to Validator"
            },
            "mutability": "mutable",
            "name": "tokenIDtoValidator",
            "nameLocation": "2836:18:32",
            "scope": 31243,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
              "typeString": "mapping(uint256 => bytes)"
            },
            "typeName": {
              "id": 30626,
              "keyType": {
                "id": 30624,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2818:7:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2810:25:32",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                "typeString": "mapping(uint256 => bytes)"
              },
              "valueType": {
                "id": 30625,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "2829:5:32",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 30634,
            "nodeType": "EventDefinition",
            "src": "2964:64:32",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 30628,
              "nodeType": "StructuredDocumentation",
              "src": "2861:98:32",
              "text": "@dev event for when a batch is tried to withdrawn but not enough rpl\n are available yet"
            },
            "eventSelector": "6cac971587f3485cf88026d10806eb012734ef89e176a8317db787673df0bc86",
            "name": "RPLStakeRequired",
            "nameLocation": "2970:16:32",
            "parameters": {
              "id": 30633,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30630,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_availRPL",
                  "nameLocation": "2995:9:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30634,
                  "src": "2987:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30629,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2987:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30632,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_requiredRPL",
                  "nameLocation": "3014:12:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30634,
                  "src": "3006:20:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30631,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3006:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2986:41:32"
            }
          },
          {
            "id": 30639,
            "nodeType": "EventDefinition",
            "src": "3063:32:32",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 30635,
              "nodeType": "StructuredDocumentation",
              "src": "3033:25:32",
              "text": "@dev event for when a"
            },
            "eventSelector": "e00980bb39e844bb13b664e7bba98e52bf3935dbf4c59ccc802f1ae93f8076ea",
            "name": "ValidatorSet",
            "nameLocation": "3069:12:32",
            "parameters": {
              "id": 30638,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30637,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_vali",
                  "nameLocation": "3088:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30639,
                  "src": "3082:11:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 30636,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3082:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3081:13:32"
            }
          },
          {
            "id": 30650,
            "nodeType": "EventDefinition",
            "src": "3157:135:32",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 30640,
              "nodeType": "StructuredDocumentation",
              "src": "3100:52:32",
              "text": "@dev event for when a user requests a withdrawal"
            },
            "eventSelector": "57e8bc4c74baca16ab16c5cc83fa0bc416b230ea2a49969e56a6fe1b5ea5a863",
            "name": "UserRequestedWithdrawal",
            "nameLocation": "3163:23:32",
            "parameters": {
              "id": 30649,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30642,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "3204:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30650,
                  "src": "3196:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30641,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3196:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30644,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "3230:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30650,
                  "src": "3222:13:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30643,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3222:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30646,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "3253:4:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30650,
                  "src": "3245:12:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30645,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3245:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30648,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_stakedETH",
                  "nameLocation": "3275:10:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30650,
                  "src": "3267:18:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30647,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3267:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3186:105:32"
            }
          },
          {
            "id": 30655,
            "nodeType": "EventDefinition",
            "src": "3351:41:32",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 30651,
              "nodeType": "StructuredDocumentation",
              "src": "3298:48:32",
              "text": "@dev event for when the ETH limit is changed"
            },
            "eventSelector": "f5ef0716d925ac1ef70d8b610f013c7fd7cd03f9120fb486f0c4f18b4ef6f5c5",
            "name": "ETHLimitChanged",
            "nameLocation": "3357:15:32",
            "parameters": {
              "id": 30654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30653,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_newLimit",
                  "nameLocation": "3381:9:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30655,
                  "src": "3373:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30652,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3373:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3372:19:32"
            }
          },
          {
            "id": 30660,
            "nodeType": "EventDefinition",
            "src": "3465:56:32",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 30656,
              "nodeType": "StructuredDocumentation",
              "src": "3398:62:32",
              "text": "@dev event for when the RocketPool Node Address is changed"
            },
            "eventSelector": "234e4926e7311948b723292a80f6b0aa228047bf0ef59c361707c3e91e0e33a2",
            "name": "RocketPoolNodeAddressChanged",
            "nameLocation": "3471:28:32",
            "parameters": {
              "id": 30659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30658,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_newAddress",
                  "nameLocation": "3508:11:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30660,
                  "src": "3500:19:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3500:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3499:21:32"
            }
          },
          {
            "id": 30663,
            "nodeType": "ErrorDefinition",
            "src": "3638:26:32",
            "nodes": [],
            "documentation": {
              "id": 30661,
              "nodeType": "StructuredDocumentation",
              "src": "3572:61:32",
              "text": "@dev more RPL stake has to be done in order to open vault"
            },
            "errorSelector": "c7d40719",
            "name": "NotEnoughRPLStake",
            "nameLocation": "3644:17:32",
            "parameters": {
              "id": 30662,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3661:2:32"
            }
          },
          {
            "id": 30671,
            "nodeType": "FunctionDefinition",
            "src": "3935:201:32",
            "nodes": [],
            "body": {
              "id": 30670,
              "nodeType": "Block",
              "src": "4134:2:32",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 30664,
              "nodeType": "StructuredDocumentation",
              "src": "3670:260:32",
              "text": "@notice each pool related vault gets its separate tokenID which depicts \nthe nft for each staker\n@dev the IPNS makes sure the nfts stay reachable via this link while \nnew nfts get added to the underlying ipfs folder"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f69706e732f6b3531717a6935757175356469766b6661327678753269373179686a336b36726d36626776676e64347130306834663830636234696d736739757932396c2f7b69647d2e6a736f6e",
                    "id": 30667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3978:141:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_bba1ca916793713bf83d854442dd41232f2a5e2a6c1963135c33f690e70b17c5",
                      "typeString": "literal_string \"https://ipfs.blockscape.network/ipns/k51qzi5uqu5divkfa2vxu2i71yhj3k6rm6bgvgnd4q00h4f80cb4imsg9uy29l/{id}.json\""
                    },
                    "value": "https://ipfs.blockscape.network/ipns/k51qzi5uqu5divkfa2vxu2i71yhj3k6rm6bgvgnd4q00h4f80cb4imsg9uy29l/{id}.json"
                  }
                ],
                "id": 30668,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 30666,
                  "name": "ERC1155",
                  "nameLocations": [
                    "3957:7:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26170,
                  "src": "3957:7:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "3957:172:32"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 30665,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3946:2:32"
            },
            "returnParameters": {
              "id": 30669,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4134:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30676,
            "nodeType": "ErrorDefinition",
            "src": "4303:39:32",
            "nodes": [],
            "documentation": {
              "id": 30672,
              "nodeType": "StructuredDocumentation",
              "src": "4199:99:32",
              "text": "@notice for a token the validator can only be set once otherwise revert\n with this error"
            },
            "errorSelector": "47b41d48",
            "name": "ValidatorAlreadySet",
            "nameLocation": "4309:19:32",
            "parameters": {
              "id": 30675,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30674,
                  "mutability": "mutable",
                  "name": "_vali",
                  "nameLocation": "4335:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30676,
                  "src": "4329:11:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 30673,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4329:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4328:13:32"
            }
          },
          {
            "id": 30684,
            "nodeType": "FunctionDefinition",
            "src": "4543:279:32",
            "nodes": [],
            "body": {
              "id": 30683,
              "nodeType": "Block",
              "src": "4585:237:32",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "4673:143:32",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4718:44:32",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4743:1:32",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4746:1:32",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "4736:6:32"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4736:12:32"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4736:12:32"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "allowPubDeposit.slot",
                              "nodeType": "YulIdentifier",
                              "src": "4696:20:32"
                            }
                          ],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "4690:5:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "4690:27:32"
                        },
                        "nodeType": "YulIf",
                        "src": "4687:75:32"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "allowPubDeposit.slot",
                              "nodeType": "YulIdentifier",
                              "src": "4782:20:32"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "4804:1:32",
                              "type": "",
                              "value": "1"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "4775:6:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "4775:31:32"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "4775:31:32"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 30581,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "4696:20:32",
                      "suffix": "slot",
                      "valueSize": 1
                    },
                    {
                      "declaration": 30581,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "4782:20:32",
                      "suffix": "slot",
                      "valueSize": 1
                    }
                  ],
                  "id": 30682,
                  "nodeType": "InlineAssembly",
                  "src": "4664:152:32"
                }
              ]
            },
            "documentation": {
              "id": 30677,
              "nodeType": "StructuredDocumentation",
              "src": "4402:136:32",
              "text": "@notice makes the vault stakable again after it has been closed\n @dev is triggered when the vault can be staked at rocketpool"
            },
            "functionSelector": "f9d7afd7",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30680,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30679,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "4575:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "4575:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "4575:9:32"
              }
            ],
            "name": "openSoloVault",
            "nameLocation": "4552:13:32",
            "parameters": {
              "id": 30678,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4565:2:32"
            },
            "returnParameters": {
              "id": 30681,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4585:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30702,
            "nodeType": "FunctionDefinition",
            "src": "5173:103:32",
            "nodes": [],
            "body": {
              "id": 30701,
              "nodeType": "Block",
              "src": "5225:51:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 30698,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30687,
                        "src": "5261:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 30694,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24810,
                              "src": "5243:5:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 30695,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5243:7:32",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 30693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5235:8:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 30692,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5235:8:32",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 30696,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5235:16:32",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 30697,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5252:8:32",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "5235:25:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 30699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5235:34:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30700,
                  "nodeType": "ExpressionStatement",
                  "src": "5235:34:32"
                }
              ]
            },
            "documentation": {
              "id": 30685,
              "nodeType": "StructuredDocumentation",
              "src": "4828:340:32",
              "text": "@notice withdraw the given amount to the deployer, triggered when the \nthe backend controller moves the stake to rocketpool\n@dev the withdraw function remains public as safety measurement to\nnot lock-in client stakes in case of contract issues\n@param _amount the amount in wei to withdraw"
            },
            "functionSelector": "2e1a7d4d",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30690,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30689,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "5215:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "5215:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "5215:9:32"
              }
            ],
            "name": "withdraw",
            "nameLocation": "5182:8:32",
            "parameters": {
              "id": 30688,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30687,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "5199:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30702,
                  "src": "5191:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30686,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5191:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5190:17:32"
            },
            "returnParameters": {
              "id": 30691,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5225:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30710,
            "nodeType": "FunctionDefinition",
            "src": "5436:125:32",
            "nodes": [],
            "body": {
              "id": 30709,
              "nodeType": "Block",
              "src": "5481:80:32",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "5500:55:32",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "allowPubDeposit.slot",
                              "nodeType": "YulIdentifier",
                              "src": "5521:20:32"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5543:1:32",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "5514:6:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5514:31:32"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "5514:31:32"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 30581,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "5521:20:32",
                      "suffix": "slot",
                      "valueSize": 1
                    }
                  ],
                  "id": 30708,
                  "nodeType": "InlineAssembly",
                  "src": "5491:64:32"
                }
              ]
            },
            "documentation": {
              "id": 30703,
              "nodeType": "StructuredDocumentation",
              "src": "5282:149:32",
              "text": "@notice is triggered when the vault can be staked at rocketpool\n@dev future staking interactions are prevented afterwards"
            },
            "functionSelector": "63b613f2",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30706,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30705,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "5471:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "5471:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "5471:9:32"
              }
            ],
            "name": "closeSoloVault",
            "nameLocation": "5445:14:32",
            "parameters": {
              "id": 30704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5459:2:32"
            },
            "returnParameters": {
              "id": 30707,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5481:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30740,
            "nodeType": "FunctionDefinition",
            "src": "5691:683:32",
            "nodes": [],
            "body": {
              "id": 30739,
              "nodeType": "Block",
              "src": "5752:622:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 30717,
                        "name": "allowPubDeposit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30581,
                        "src": "5808:15:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5661756c7420697320636c6f736564",
                        "id": 30718,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5825:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a03b5f44972edefb92fe6c4d331c0ce039eb92db0d330f3206b8fc937a99a13d",
                          "typeString": "literal_string \"Vault is closed\""
                        },
                        "value": "Vault is closed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a03b5f44972edefb92fe6c4d331c0ce039eb92db0d330f3206b8fc937a99a13d",
                          "typeString": "literal_string \"Vault is closed\""
                        }
                      ],
                      "id": 30716,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5800:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 30719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5800:43:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30720,
                  "nodeType": "ExpressionStatement",
                  "src": "5800:43:32"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 30725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 30722,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5935:3:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 30723,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5939:5:32",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "5935:9:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 30724,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5948:1:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "5935:14:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e7420455448",
                        "id": 30726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5951:18:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1",
                          "typeString": "literal_string \"Insufficient ETH\""
                        },
                        "value": "Insufficient ETH"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1",
                          "typeString": "literal_string \"Insufficient ETH\""
                        }
                      ],
                      "id": 30721,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5927:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 30727,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5927:43:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30728,
                  "nodeType": "ExpressionStatement",
                  "src": "5927:43:32"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 30730,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6055:3:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 30731,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6059:5:32",
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "6055:9:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 30732,
                        "name": "tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30585,
                        "src": "6066:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 30729,
                      "name": "_metadataSoloVaultInternal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31208,
                      "src": "6028:26:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 30733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6028:46:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30734,
                  "nodeType": "ExpressionStatement",
                  "src": "6028:46:32"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "6094:211:32",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "6144:40:32",
                        "value": {
                          "arguments": [
                            {
                              "name": "tokenID.slot",
                              "nodeType": "YulIdentifier",
                              "src": "6171:12:32"
                            }
                          ],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "6165:5:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6165:19:32"
                        },
                        "variables": [
                          {
                            "name": "tokenID_value",
                            "nodeType": "YulTypedName",
                            "src": "6148:13:32",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "6197:46:32",
                        "value": {
                          "arguments": [
                            {
                              "name": "tokenID_value",
                              "nodeType": "YulIdentifier",
                              "src": "6226:13:32"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "6241:1:32",
                              "type": "",
                              "value": "1"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "6222:3:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6222:21:32"
                        },
                        "variables": [
                          {
                            "name": "new_tokenID_value",
                            "nodeType": "YulTypedName",
                            "src": "6201:17:32",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "tokenID.slot",
                              "nodeType": "YulIdentifier",
                              "src": "6263:12:32"
                            },
                            {
                              "name": "new_tokenID_value",
                              "nodeType": "YulIdentifier",
                              "src": "6277:17:32"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "6256:6:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6256:39:32"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "6256:39:32"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 30585,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "6171:12:32",
                      "suffix": "slot",
                      "valueSize": 1
                    },
                    {
                      "declaration": 30585,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "6263:12:32",
                      "suffix": "slot",
                      "valueSize": 1
                    }
                  ],
                  "id": 30735,
                  "nodeType": "InlineAssembly",
                  "src": "6085:220:32"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 30736,
                      "name": "_closeSoloVaultInternal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31214,
                      "src": "6342:23:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 30737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6342:25:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30738,
                  "nodeType": "ExpressionStatement",
                  "src": "6342:25:32"
                }
              ]
            },
            "documentation": {
              "id": 30711,
              "nodeType": "StructuredDocumentation",
              "src": "5567:119:32",
              "text": "@notice used when staking eth into the contract\n @dev the vault must be open and equal the depositing amount"
            },
            "functionSelector": "70a383e0",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30714,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30713,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "5739:12:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24912,
                  "src": "5739:12:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "5739:12:32"
              }
            ],
            "name": "tryDepositSoloVault",
            "nameLocation": "5700:19:32",
            "parameters": {
              "id": 30712,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5719:2:32"
            },
            "returnParameters": {
              "id": 30715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5752:0:32"
            },
            "scope": 31243,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30748,
            "nodeType": "FunctionDefinition",
            "src": "6492:240:32",
            "nodes": [],
            "body": {
              "id": 30747,
              "nodeType": "Block",
              "src": "6539:193:32",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "6558:143:32",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6647:44:32",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6672:1:32",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6675:1:32",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "6665:6:32"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6665:12:32"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6665:12:32"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "allowPubDeposit.slot",
                              "nodeType": "YulIdentifier",
                              "src": "6625:20:32"
                            }
                          ],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "6619:5:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6619:27:32"
                        },
                        "nodeType": "YulIf",
                        "src": "6616:75:32"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 30581,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "6625:20:32",
                      "suffix": "slot",
                      "valueSize": 1
                    }
                  ],
                  "id": 30746,
                  "nodeType": "InlineAssembly",
                  "src": "6549:152:32"
                }
              ]
            },
            "documentation": {
              "id": 30741,
              "nodeType": "StructuredDocumentation",
              "src": "6380:107:32",
              "text": "@notice this gets triggered by the backend controller when the vault \nis closed"
            },
            "functionSelector": "f649b014",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30744,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30743,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "6529:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "6529:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "6529:9:32"
              }
            ],
            "name": "tryWithdrawBatch",
            "nameLocation": "6501:16:32",
            "parameters": {
              "id": 30742,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6517:2:32"
            },
            "returnParameters": {
              "id": 30745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6539:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30803,
            "nodeType": "FunctionDefinition",
            "src": "6969:559:32",
            "nodes": [],
            "body": {
              "id": 30802,
              "nodeType": "Block",
              "src": "7071:457:32",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 30764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "7085:48:32",
                    "subExpression": {
                      "arguments": [
                        {
                          "hexValue": "",
                          "id": 30759,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7100:2:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          },
                          "value": ""
                        },
                        {
                          "baseExpression": {
                            "id": 30760,
                            "name": "tokenIDtoValidator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30627,
                            "src": "7104:18:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                              "typeString": "mapping(uint256 => bytes storage ref)"
                            }
                          },
                          "id": 30762,
                          "indexExpression": {
                            "id": 30761,
                            "name": "_tokenID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30751,
                            "src": "7123:8:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7104:28:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          },
                          {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        ],
                        "id": 30758,
                        "name": "_compareBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31242,
                        "src": "7086:13:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                          "typeString": "function (bytes memory,bytes memory) pure returns (bool)"
                        }
                      },
                      "id": 30763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7086:47:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 30772,
                  "nodeType": "IfStatement",
                  "src": "7081:135:32",
                  "trueBody": {
                    "id": 30771,
                    "nodeType": "Block",
                    "src": "7135:81:32",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 30766,
                                "name": "tokenIDtoValidator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30627,
                                "src": "7176:18:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                  "typeString": "mapping(uint256 => bytes storage ref)"
                                }
                              },
                              "id": 30768,
                              "indexExpression": {
                                "id": 30767,
                                "name": "_tokenID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30751,
                                "src": "7195:8:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7176:28:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage",
                                "typeString": "bytes storage ref"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_storage",
                                "typeString": "bytes storage ref"
                              }
                            ],
                            "id": 30765,
                            "name": "ValidatorAlreadySet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30676,
                            "src": "7156:19:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (bytes memory) pure"
                            }
                          },
                          "id": 30769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7156:49:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 30770,
                        "nodeType": "RevertStatement",
                        "src": "7149:56:32"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 30777,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 30773,
                        "name": "tokenIDtoValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30627,
                        "src": "7225:18:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                          "typeString": "mapping(uint256 => bytes storage ref)"
                        }
                      },
                      "id": 30775,
                      "indexExpression": {
                        "id": 30774,
                        "name": "_tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30751,
                        "src": "7244:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7225:28:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 30776,
                      "name": "_vali",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30753,
                      "src": "7256:5:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "7225:36:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 30778,
                  "nodeType": "ExpressionStatement",
                  "src": "7225:36:32"
                },
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 30779,
                      "name": "hasNodeEnoughRPLStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30994,
                      "src": "7276:21:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                        "typeString": "function () view returns (bool)"
                      }
                    },
                    "id": 30780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7276:23:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 30800,
                    "nodeType": "Block",
                    "src": "7347:175:32",
                    "statements": [
                      {
                        "assignments": [
                          30786
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 30786,
                            "mutability": "mutable",
                            "name": "availableRPL",
                            "nameLocation": "7369:12:32",
                            "nodeType": "VariableDeclaration",
                            "scope": 30800,
                            "src": "7361:20:32",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 30785,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7361:7:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 30789,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 30787,
                            "name": "getAvailableRPLStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30921,
                            "src": "7384:20:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 30788,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7384:22:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7361:45:32"
                      },
                      {
                        "assignments": [
                          30791
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 30791,
                            "mutability": "mutable",
                            "name": "reqRPL",
                            "nameLocation": "7428:6:32",
                            "nodeType": "VariableDeclaration",
                            "scope": 30800,
                            "src": "7420:14:32",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 30790,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7420:7:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 30794,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 30792,
                            "name": "getReqRPLStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30954,
                            "src": "7437:14:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 30793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7437:16:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7420:33:32"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 30796,
                              "name": "availableRPL",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30786,
                              "src": "7490:12:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 30797,
                              "name": "reqRPL",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30791,
                              "src": "7504:6:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 30795,
                            "name": "RPLStakeRequired",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30634,
                            "src": "7473:16:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 30798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7473:38:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 30799,
                        "nodeType": "EmitStatement",
                        "src": "7468:43:32"
                      }
                    ]
                  },
                  "id": 30801,
                  "nodeType": "IfStatement",
                  "src": "7272:250:32",
                  "trueBody": {
                    "id": 30784,
                    "nodeType": "Block",
                    "src": "7301:40:32",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 30781,
                            "name": "openSoloVault",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30684,
                            "src": "7315:13:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 30782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7315:15:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 30783,
                        "nodeType": "ExpressionStatement",
                        "src": "7315:15:32"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 30749,
              "nodeType": "StructuredDocumentation",
              "src": "6738:226:32",
              "text": "@notice set validator address for given token id\n@dev works only once and emits, then reverts\n@param _tokenID Identifier of the vault\n@param _vali the current address of the validator"
            },
            "functionSelector": "8d8b7ca9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30756,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30755,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "7057:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "7057:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "7057:9:32"
              }
            ],
            "name": "updateValidator",
            "nameLocation": "6978:15:32",
            "parameters": {
              "id": 30754,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30751,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "7002:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30803,
                  "src": "6994:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30750,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6994:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30753,
                  "mutability": "mutable",
                  "name": "_vali",
                  "nameLocation": "7025:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30803,
                  "src": "7012:18:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 30752,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7012:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6993:38:32"
            },
            "returnParameters": {
              "id": 30757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7071:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30840,
            "nodeType": "FunctionDefinition",
            "src": "7713:469:32",
            "nodes": [],
            "body": {
              "id": 30839,
              "nodeType": "Block",
              "src": "7815:367:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    30812
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30812,
                      "mutability": "mutable",
                      "name": "curWithdrawFee",
                      "nameLocation": "7833:14:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30839,
                      "src": "7825:22:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30811,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7825:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30816,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30814,
                        "name": "_tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30806,
                        "src": "7874:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 30813,
                      "name": "viewUserRequestWithdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31056,
                      "src": "7850:23:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 30815,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7850:33:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7825:58:32"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 30823,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 30818,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "7908:3:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 30819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7912:6:32",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "7908:10:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 30820,
                          "name": "_tokenID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30806,
                          "src": "7920:8:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 30817,
                        "name": "balanceOf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25063,
                        "src": "7898:9:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (address,uint256) view returns (uint256)"
                        }
                      },
                      "id": 30821,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7898:31:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 30822,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7933:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "7898:36:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 30836,
                  "nodeType": "IfStatement",
                  "src": "7894:250:32",
                  "trueBody": {
                    "id": 30835,
                    "nodeType": "Block",
                    "src": "7936:208:32",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 30825,
                              "name": "_tokenID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30806,
                              "src": "7996:8:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 30826,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "8022:3:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 30827,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8026:6:32",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "8022:10:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 30828,
                              "name": "curWithdrawFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30812,
                              "src": "8050:14:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 30829,
                                  "name": "tokenIDtoMetadata",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 30622,
                                  "src": "8082:17:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
                                    "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata storage ref)"
                                  }
                                },
                                "id": 30831,
                                "indexExpression": {
                                  "id": 30830,
                                  "name": "_tokenID",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 30806,
                                  "src": "8100:8:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8082:27:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Metadata_$30616_storage",
                                  "typeString": "struct BlockscapeSoloVaultGoerli.Metadata storage ref"
                                }
                              },
                              "id": 30832,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8110:9:32",
                              "memberName": "stakedETH",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 30607,
                              "src": "8082:37:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 30824,
                            "name": "UserRequestedWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30650,
                            "src": "7955:23:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,address,uint256,uint256)"
                            }
                          },
                          "id": 30833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7955:178:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 30834,
                        "nodeType": "EmitStatement",
                        "src": "7950:183:32"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 30837,
                    "name": "curWithdrawFee",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30812,
                    "src": "8161:14:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 30810,
                  "id": 30838,
                  "nodeType": "Return",
                  "src": "8154:21:32"
                }
              ]
            },
            "documentation": {
              "id": 30804,
              "nodeType": "StructuredDocumentation",
              "src": "7534:174:32",
              "text": "@notice used when user wants to unstake\n@param _tokenID which pool the staker wants to unstake\n@return _amount how much the user gets back"
            },
            "functionSelector": "6ea5ba1a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "userRequestWithdraw",
            "nameLocation": "7722:19:32",
            "parameters": {
              "id": 30807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30806,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "7750:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30840,
                  "src": "7742:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7742:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7741:18:32"
            },
            "returnParameters": {
              "id": 30810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30809,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "7802:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30840,
                  "src": "7794:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30808,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7794:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7793:17:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30857,
            "nodeType": "FunctionDefinition",
            "src": "8420:143:32",
            "nodes": [],
            "body": {
              "id": 30856,
              "nodeType": "Block",
              "src": "8482:81:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 30850,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 30848,
                      "name": "curETHlimit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30577,
                      "src": "8492:11:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 30849,
                      "name": "_newLimit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30843,
                      "src": "8506:9:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8492:23:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 30851,
                  "nodeType": "ExpressionStatement",
                  "src": "8492:23:32"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 30853,
                        "name": "_newLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30843,
                        "src": "8546:9:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 30852,
                      "name": "ETHLimitChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30655,
                      "src": "8530:15:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 30854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8530:26:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30855,
                  "nodeType": "EmitStatement",
                  "src": "8525:31:32"
                }
              ]
            },
            "documentation": {
              "id": 30841,
              "nodeType": "StructuredDocumentation",
              "src": "8233:182:32",
              "text": "@notice the limit might change in the future if rocketpool supports \nsmaller pool sizes\n@param _newLimit the new pool amount which has to be staked"
            },
            "functionSelector": "b1251026",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30846,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30845,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "8472:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "8472:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "8472:9:32"
              }
            ],
            "name": "changeETHLimit",
            "nameLocation": "8429:14:32",
            "parameters": {
              "id": 30844,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30843,
                  "mutability": "mutable",
                  "name": "_newLimit",
                  "nameLocation": "8452:9:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30857,
                  "src": "8444:17:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8444:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8443:19:32"
            },
            "returnParameters": {
              "id": 30847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8482:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30870,
            "nodeType": "FunctionDefinition",
            "src": "8691:102:32",
            "nodes": [],
            "body": {
              "id": 30869,
              "nodeType": "Block",
              "src": "8751:42:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 30867,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 30865,
                      "name": "initWithdrawFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30573,
                      "src": "8761:15:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 30866,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30860,
                      "src": "8779:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8761:25:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 30868,
                  "nodeType": "ExpressionStatement",
                  "src": "8761:25:32"
                }
              ]
            },
            "documentation": {
              "id": 30858,
              "nodeType": "StructuredDocumentation",
              "src": "8569:117:32",
              "text": "@notice the withdraw fee might be changed in the future\n@param _amount the new fee in wei"
            },
            "functionSelector": "b6ac642a",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30863,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30862,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "8741:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "8741:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "8741:9:32"
              }
            ],
            "name": "setWithdrawFee",
            "nameLocation": "8700:14:32",
            "parameters": {
              "id": 30861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30860,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "8723:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30870,
                  "src": "8715:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8715:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8714:17:32"
            },
            "returnParameters": {
              "id": 30864,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8751:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30887,
            "nodeType": "FunctionDefinition",
            "src": "8967:259:32",
            "nodes": [],
            "body": {
              "id": 30886,
              "nodeType": "Block",
              "src": "9081:145:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 30880,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 30878,
                      "name": "blockscapeRocketPoolNode",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30569,
                      "src": "9091:24:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 30879,
                      "name": "_newBlockscapeRocketPoolNode",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30873,
                      "src": "9118:28:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9091:55:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 30881,
                  "nodeType": "ExpressionStatement",
                  "src": "9091:55:32"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 30883,
                        "name": "_newBlockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30873,
                        "src": "9190:28:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 30882,
                      "name": "RocketPoolNodeAddressChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30660,
                      "src": "9161:28:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 30884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9161:58:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 30885,
                  "nodeType": "EmitStatement",
                  "src": "9156:63:32"
                }
              ]
            },
            "documentation": {
              "id": 30871,
              "nodeType": "StructuredDocumentation",
              "src": "8799:163:32",
              "text": "@notice gets used if rocket pool changes the address of their node\n@param _newBlockscapeRocketPoolNode the new address of the pool node"
            },
            "functionSelector": "f6b76685",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 30876,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 30875,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "9067:9:32"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24801,
                  "src": "9067:9:32"
                },
                "nodeType": "ModifierInvocation",
                "src": "9067:9:32"
              }
            ],
            "name": "setBlockscapeRocketPoolNode",
            "nameLocation": "8976:27:32",
            "parameters": {
              "id": 30874,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30873,
                  "mutability": "mutable",
                  "name": "_newBlockscapeRocketPoolNode",
                  "nameLocation": "9012:28:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 30887,
                  "src": "9004:36:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30872,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9004:7:32",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9003:38:32"
            },
            "returnParameters": {
              "id": 30877,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9081:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 30896,
            "nodeType": "FunctionDefinition",
            "src": "9479:89:32",
            "nodes": [],
            "body": {
              "id": 30895,
              "nodeType": "Block",
              "src": "9529:39:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 30893,
                    "name": "allowPubDeposit",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30581,
                    "src": "9546:15:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 30892,
                  "id": 30894,
                  "nodeType": "Return",
                  "src": "9539:22:32"
                }
              ]
            },
            "documentation": {
              "id": 30888,
              "nodeType": "StructuredDocumentation",
              "src": "9262:212:32",
              "text": "@notice does the vault currently allow depositing\n@dev the backend controller will reopen then vault after the stake\nhave been transferred\n@return is depositing enabled"
            },
            "functionSelector": "ec36d35e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isVaultOpen",
            "nameLocation": "9488:11:32",
            "parameters": {
              "id": 30889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9499:2:32"
            },
            "returnParameters": {
              "id": 30892,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30891,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30896,
                  "src": "9523:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 30890,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9523:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9522:6:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30905,
            "nodeType": "FunctionDefinition",
            "src": "9676:95:32",
            "nodes": [],
            "body": {
              "id": 30904,
              "nodeType": "Block",
              "src": "9736:35:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 30902,
                    "name": "curETHlimit",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30577,
                    "src": "9753:11:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 30901,
                  "id": 30903,
                  "nodeType": "Return",
                  "src": "9746:18:32"
                }
              ]
            },
            "documentation": {
              "id": 30897,
              "nodeType": "StructuredDocumentation",
              "src": "9574:97:32",
              "text": "@notice the current depositing threshold\n@return is depositing enabled"
            },
            "functionSelector": "354228be",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentEthLimit",
            "nameLocation": "9685:18:32",
            "parameters": {
              "id": 30898,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9703:2:32"
            },
            "returnParameters": {
              "id": 30901,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30900,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30905,
                  "src": "9727:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30899,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9727:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9726:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30921,
            "nodeType": "FunctionDefinition",
            "src": "9997:213:32",
            "nodes": [],
            "body": {
              "id": 30920,
              "nodeType": "Block",
              "src": "10059:151:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    30912
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30912,
                      "mutability": "mutable",
                      "name": "nodeRPLStake",
                      "nameLocation": "10077:12:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30920,
                      "src": "10069:20:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30911,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10069:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30917,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30915,
                        "name": "blockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30569,
                        "src": "10139:24:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 30913,
                        "name": "rocketNodeStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30605,
                        "src": "10092:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                          "typeString": "contract RocketNodeStakingInterface"
                        }
                      },
                      "id": 30914,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10110:15:32",
                      "memberName": "getNodeRPLStake",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31291,
                      "src": "10092:33:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 30916,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10092:81:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10069:104:32"
                },
                {
                  "expression": {
                    "id": 30918,
                    "name": "nodeRPLStake",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30912,
                    "src": "10191:12:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 30910,
                  "id": 30919,
                  "nodeType": "Return",
                  "src": "10184:19:32"
                }
              ]
            },
            "documentation": {
              "id": 30906,
              "nodeType": "StructuredDocumentation",
              "src": "9777:215:32",
              "text": "@notice show the currently available RPL stake which is needed to create \na pool on rocketscape\n@return the current available RPL stake with already deducted minimum\nstake"
            },
            "functionSelector": "9fe8d3aa",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAvailableRPLStake",
            "nameLocation": "10006:20:32",
            "parameters": {
              "id": 30907,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10026:2:32"
            },
            "returnParameters": {
              "id": 30910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30909,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30921,
                  "src": "10050:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30908,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10050:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10049:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30954,
            "nodeType": "FunctionDefinition",
            "src": "10433:425:32",
            "nodes": [],
            "body": {
              "id": 30953,
              "nodeType": "Block",
              "src": "10489:369:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    30928
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30928,
                      "mutability": "mutable",
                      "name": "minipoolLimit",
                      "nameLocation": "10507:13:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30953,
                      "src": "10499:21:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30927,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10499:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30933,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30931,
                        "name": "blockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30569,
                        "src": "10575:24:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 30929,
                        "name": "rocketNodeStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30605,
                        "src": "10523:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                          "typeString": "contract RocketNodeStakingInterface"
                        }
                      },
                      "id": 30930,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10541:20:32",
                      "memberName": "getNodeMinipoolLimit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31342,
                      "src": "10523:38:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 30932,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10523:86:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10499:110:32"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 30936,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 30934,
                      "name": "minipoolLimit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30928,
                      "src": "10623:13:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 30935,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10640:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "10623:18:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 30940,
                  "nodeType": "IfStatement",
                  "src": "10619:57:32",
                  "trueBody": {
                    "id": 30939,
                    "nodeType": "Block",
                    "src": "10643:33:32",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 30937,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10664:1:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 30926,
                        "id": 30938,
                        "nodeType": "Return",
                        "src": "10657:8:32"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    30942
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30942,
                      "mutability": "mutable",
                      "name": "minimumRPLStake",
                      "nameLocation": "10694:15:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30953,
                      "src": "10686:23:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30941,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10686:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30947,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30945,
                        "name": "blockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30569,
                        "src": "10766:24:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 30943,
                        "name": "rocketNodeStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30605,
                        "src": "10712:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                          "typeString": "contract RocketNodeStakingInterface"
                        }
                      },
                      "id": 30944,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10730:22:32",
                      "memberName": "getNodeMinimumRPLStake",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31328,
                      "src": "10712:40:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 30946,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10712:88:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10686:114:32"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 30950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 30948,
                          "name": "minimumRPLStake",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30942,
                          "src": "10819:15:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "id": 30949,
                          "name": "minipoolLimit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30928,
                          "src": "10837:13:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10819:31:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 30951,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "10818:33:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 30926,
                  "id": 30952,
                  "nodeType": "Return",
                  "src": "10811:40:32"
                }
              ]
            },
            "documentation": {
              "id": 30922,
              "nodeType": "StructuredDocumentation",
              "src": "10216:212:32",
              "text": "@notice calculates the required RPL needed to stake according to \npoolsize\n@dev if the minipoollimit is `0` then the required stake is also `0`!\n@return the RPLs needed"
            },
            "functionSelector": "02943854",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getReqRPLStake",
            "nameLocation": "10442:14:32",
            "parameters": {
              "id": 30923,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10456:2:32"
            },
            "returnParameters": {
              "id": 30926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30925,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30954,
                  "src": "10480:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30924,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10480:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10479:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 30994,
            "nodeType": "FunctionDefinition",
            "src": "10930:475:32",
            "nodes": [],
            "body": {
              "id": 30993,
              "nodeType": "Block",
              "src": "10990:415:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    30961
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30961,
                      "mutability": "mutable",
                      "name": "minipoolLimit",
                      "nameLocation": "11008:13:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30993,
                      "src": "11000:21:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30960,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11000:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30966,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30964,
                        "name": "blockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30569,
                        "src": "11076:24:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 30962,
                        "name": "rocketNodeStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30605,
                        "src": "11024:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                          "typeString": "contract RocketNodeStakingInterface"
                        }
                      },
                      "id": 30963,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11042:20:32",
                      "memberName": "getNodeMinipoolLimit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31342,
                      "src": "11024:38:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 30965,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11024:86:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11000:110:32"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 30969,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 30967,
                      "name": "minipoolLimit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30961,
                      "src": "11124:13:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 30968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "11141:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "11124:18:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 30973,
                  "nodeType": "IfStatement",
                  "src": "11120:61:32",
                  "trueBody": {
                    "id": 30972,
                    "nodeType": "Block",
                    "src": "11144:37:32",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 30970,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11165:5:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 30959,
                        "id": 30971,
                        "nodeType": "Return",
                        "src": "11158:12:32"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    30975
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30975,
                      "mutability": "mutable",
                      "name": "nodeRPLStake",
                      "nameLocation": "11199:12:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30993,
                      "src": "11191:20:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30974,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11191:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30980,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 30978,
                        "name": "blockscapeRocketPoolNode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30569,
                        "src": "11261:24:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 30976,
                        "name": "rocketNodeStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30605,
                        "src": "11214:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RocketNodeStakingInterface_$31367",
                          "typeString": "contract RocketNodeStakingInterface"
                        }
                      },
                      "id": 30977,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "11232:15:32",
                      "memberName": "getNodeRPLStake",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31291,
                      "src": "11214:33:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 30979,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11214:81:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11191:104:32"
                },
                {
                  "assignments": [
                    30982
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 30982,
                      "mutability": "mutable",
                      "name": "minimumReqRPL",
                      "nameLocation": "11313:13:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 30993,
                      "src": "11305:21:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 30981,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11305:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 30985,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 30983,
                      "name": "getReqRPLStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30954,
                      "src": "11329:14:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 30984,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11329:16:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11305:40:32"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 30991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 30988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 30986,
                            "name": "nodeRPLStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30975,
                            "src": "11364:12:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 30987,
                            "name": "minimumReqRPL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30982,
                            "src": "11379:13:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11364:28:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 30989,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "11363:30:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 30990,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "11397:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "11363:35:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 30959,
                  "id": 30992,
                  "nodeType": "Return",
                  "src": "11356:42:32"
                }
              ]
            },
            "documentation": {
              "id": 30955,
              "nodeType": "StructuredDocumentation",
              "src": "10864:61:32",
              "text": "@notice has the node enough RPL to stake another minipool"
            },
            "functionSelector": "66f9fa3a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "hasNodeEnoughRPLStake",
            "nameLocation": "10939:21:32",
            "parameters": {
              "id": 30956,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10960:2:32"
            },
            "returnParameters": {
              "id": 30959,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30958,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 30994,
                  "src": "10984:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 30957,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10984:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10983:6:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 31056,
            "nodeType": "FunctionDefinition",
            "src": "11703:741:32",
            "nodes": [],
            "body": {
              "id": 31055,
              "nodeType": "Block",
              "src": "11820:624:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    31003
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 31003,
                      "mutability": "mutable",
                      "name": "curWithdrawFee",
                      "nameLocation": "11838:14:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 31055,
                      "src": "11830:22:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 31002,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11830:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 31005,
                  "initialValue": {
                    "id": 31004,
                    "name": "initWithdrawFee",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30573,
                    "src": "11855:15:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11830:40:32"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 31012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 31007,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "11895:3:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 31008,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "11899:6:32",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "11895:10:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 31009,
                          "name": "_tokenID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30997,
                          "src": "11907:8:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 31006,
                        "name": "balanceOf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25063,
                        "src": "11885:9:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (address,uint256) view returns (uint256)"
                        }
                      },
                      "id": 31010,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11885:31:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 31011,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "11920:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "11885:36:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 31052,
                  "nodeType": "IfStatement",
                  "src": "11881:526:32",
                  "trueBody": {
                    "id": 31051,
                    "nodeType": "Block",
                    "src": "11923:484:32",
                    "statements": [
                      {
                        "assignments": [
                          31014
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 31014,
                            "mutability": "mutable",
                            "name": "secFee",
                            "nameLocation": "12011:6:32",
                            "nodeType": "VariableDeclaration",
                            "scope": 31051,
                            "src": "12003:14:32",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 31013,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "12003:7:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 31019,
                        "initialValue": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 31017,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 31015,
                                "name": "initWithdrawFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30573,
                                "src": "12021:15:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "hexValue": "333635",
                                "id": 31016,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12039:8:32",
                                "subdenomination": "days",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_31536000_by_1",
                                  "typeString": "int_const 31536000"
                                },
                                "value": "365"
                              },
                              "src": "12021:26:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 31018,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "12020:28:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12003:45:32"
                      },
                      {
                        "assignments": [
                          31021
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 31021,
                            "mutability": "mutable",
                            "name": "timePassed",
                            "nameLocation": "12077:10:32",
                            "nodeType": "VariableDeclaration",
                            "scope": 31051,
                            "src": "12069:18:32",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 31020,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "12069:7:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 31030,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 31029,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 31022,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "12090:5:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 31023,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12096:9:32",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "12090:15:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "components": [
                              {
                                "expression": {
                                  "baseExpression": {
                                    "id": 31024,
                                    "name": "tokenIDtoMetadata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 30622,
                                    "src": "12125:17:32",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
                                      "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata storage ref)"
                                    }
                                  },
                                  "id": 31026,
                                  "indexExpression": {
                                    "id": 31025,
                                    "name": "_tokenID",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 30997,
                                    "src": "12143:8:32",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "12125:27:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Metadata_$30616_storage",
                                    "typeString": "struct BlockscapeSoloVaultGoerli.Metadata storage ref"
                                  }
                                },
                                "id": 31027,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "12153:15:32",
                                "memberName": "stakedTimestamp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 30609,
                                "src": "12125:43:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 31028,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "12124:45:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12090:79:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12069:100:32"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 31033,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 31031,
                            "name": "timePassed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31021,
                            "src": "12187:10:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "hexValue": "3330373437363030",
                            "id": 31032,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12201:8:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_30747600_by_1",
                              "typeString": "int_const 30747600"
                            },
                            "value": "30747600"
                          },
                          "src": "12187:22:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 31049,
                          "nodeType": "Block",
                          "src": "12306:91:32",
                          "statements": [
                            {
                              "expression": {
                                "id": 31047,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 31039,
                                  "name": "curWithdrawFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 31003,
                                  "src": "12324:14:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 31045,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 31040,
                                        "name": "initWithdrawFee",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 30573,
                                        "src": "12342:15:32",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 31043,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 31041,
                                              "name": "secFee",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 31014,
                                              "src": "12361:6:32",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 31042,
                                              "name": "timePassed",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 31021,
                                              "src": "12370:10:32",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "12361:19:32",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 31044,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "12360:21:32",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "12342:39:32",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 31046,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "12341:41:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "12324:58:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 31048,
                              "nodeType": "ExpressionStatement",
                              "src": "12324:58:32"
                            }
                          ]
                        },
                        "id": 31050,
                        "nodeType": "IfStatement",
                        "src": "12183:214:32",
                        "trueBody": {
                          "id": 31038,
                          "nodeType": "Block",
                          "src": "12211:89:32",
                          "statements": [
                            {
                              "expression": {
                                "id": 31036,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 31034,
                                  "name": "curWithdrawFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 31003,
                                  "src": "12229:14:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "302e35",
                                  "id": 31035,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12246:9:32",
                                  "subdenomination": "ether",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_500000000000000000_by_1",
                                    "typeString": "int_const 500000000000000000"
                                  },
                                  "value": "0.5"
                                },
                                "src": "12229:26:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 31037,
                              "nodeType": "ExpressionStatement",
                              "src": "12229:26:32"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 31053,
                    "name": "curWithdrawFee",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 31003,
                    "src": "12423:14:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 31001,
                  "id": 31054,
                  "nodeType": "Return",
                  "src": "12416:21:32"
                }
              ]
            },
            "documentation": {
              "id": 30995,
              "nodeType": "StructuredDocumentation",
              "src": "11411:287:32",
              "text": "@notice how much fees would the user has to pay if he would unstake now\nwithin the first year of staking the fee is 20%, afterwards 0.5%\n@param _tokenID which pool the staker wants to unstake\n@return _amount how much the user would pay on fees"
            },
            "functionSelector": "8776d1d7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "viewUserRequestWithdraw",
            "nameLocation": "11712:23:32",
            "parameters": {
              "id": 30998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30997,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "11744:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31056,
                  "src": "11736:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30996,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11736:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11735:18:32"
            },
            "returnParameters": {
              "id": 31001,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31000,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "11807:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31056,
                  "src": "11799:15:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30999,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11799:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11798:17:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 31076,
            "nodeType": "FunctionDefinition",
            "src": "12636:280:32",
            "nodes": [],
            "body": {
              "id": 31075,
              "nodeType": "Block",
              "src": "12757:159:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "baseExpression": {
                          "id": 31067,
                          "name": "tokenIDtoMetadata",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30622,
                          "src": "12788:17:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
                            "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata storage ref)"
                          }
                        },
                        "id": 31069,
                        "indexExpression": {
                          "id": 31068,
                          "name": "_tokenID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 31059,
                          "src": "12806:8:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "12788:27:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Metadata_$30616_storage",
                          "typeString": "struct BlockscapeSoloVaultGoerli.Metadata storage ref"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 31070,
                          "name": "tokenIDtoValidator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30627,
                          "src": "12871:18:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                            "typeString": "mapping(uint256 => bytes storage ref)"
                          }
                        },
                        "id": 31072,
                        "indexExpression": {
                          "id": 31071,
                          "name": "_tokenID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 31059,
                          "src": "12890:8:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "12871:28:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      }
                    ],
                    "id": 31073,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "12774:135:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_struct$_Metadata_$30616_storage_$_t_bytes_storage_$",
                      "typeString": "tuple(struct BlockscapeSoloVaultGoerli.Metadata storage ref,bytes storage ref)"
                    }
                  },
                  "functionReturnParameters": 31066,
                  "id": 31074,
                  "nodeType": "Return",
                  "src": "12767:142:32"
                }
              ]
            },
            "documentation": {
              "id": 31057,
              "nodeType": "StructuredDocumentation",
              "src": "12450:181:32",
              "text": "@notice gets the metadata of a given pool\n@param _tokenID identifies the pool\n@return Metadata of the pool \n@return the validator address"
            },
            "functionSelector": "a574cea4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getMetadata",
            "nameLocation": "12645:11:32",
            "parameters": {
              "id": 31060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31059,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "12665:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31076,
                  "src": "12657:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31058,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12657:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12656:18:32"
            },
            "returnParameters": {
              "id": 31066,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31063,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31076,
                  "src": "12722:15:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Metadata_$30616_memory_ptr",
                    "typeString": "struct BlockscapeSoloVaultGoerli.Metadata"
                  },
                  "typeName": {
                    "id": 31062,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 31061,
                      "name": "Metadata",
                      "nameLocations": [
                        "12722:8:32"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 30616,
                      "src": "12722:8:32"
                    },
                    "referencedDeclaration": 30616,
                    "src": "12722:8:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Metadata_$30616_storage_ptr",
                      "typeString": "struct BlockscapeSoloVaultGoerli.Metadata"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31065,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31076,
                  "src": "12739:12:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 31064,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "12739:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12721:31:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 31085,
            "nodeType": "FunctionDefinition",
            "src": "13034:83:32",
            "nodes": [],
            "body": {
              "id": 31084,
              "nodeType": "Block",
              "src": "13086:31:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 31082,
                    "name": "tokenID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 30585,
                    "src": "13103:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 31081,
                  "id": 31083,
                  "nodeType": "Return",
                  "src": "13096:14:32"
                }
              ]
            },
            "documentation": {
              "id": 31077,
              "nodeType": "StructuredDocumentation",
              "src": "12922:107:32",
              "text": "@notice the tokenID is incremented with every pool\n@return the current tokenID "
            },
            "functionSelector": "6ba367a3",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenID",
            "nameLocation": "13043:10:32",
            "parameters": {
              "id": 31078,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13053:2:32"
            },
            "returnParameters": {
              "id": 31081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31080,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31085,
                  "src": "13077:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31079,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13077:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13076:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 31098,
            "nodeType": "FunctionDefinition",
            "src": "13231:99:32",
            "nodes": [],
            "body": {
              "id": 31097,
              "nodeType": "Block",
              "src": "13285:45:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 31093,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "13310:4:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BlockscapeSoloVaultGoerli_$31243",
                            "typeString": "contract BlockscapeSoloVaultGoerli"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_BlockscapeSoloVaultGoerli_$31243",
                            "typeString": "contract BlockscapeSoloVaultGoerli"
                          }
                        ],
                        "id": 31092,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "13302:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 31091,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13302:7:32",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 31094,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "13302:13:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 31095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "13316:7:32",
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "13302:21:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 31090,
                  "id": 31096,
                  "nodeType": "Return",
                  "src": "13295:28:32"
                }
              ]
            },
            "documentation": {
              "id": 31086,
              "nodeType": "StructuredDocumentation",
              "src": "13123:103:32",
              "text": "@notice how much balance does this vault current have\n@return amount in wei"
            },
            "functionSelector": "12065fe0",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBalance",
            "nameLocation": "13240:10:32",
            "parameters": {
              "id": 31087,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13250:2:32"
            },
            "returnParameters": {
              "id": 31090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31089,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31098,
                  "src": "13276:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31088,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13276:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13275:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 31132,
            "nodeType": "FunctionDefinition",
            "src": "13425:225:32",
            "nodes": [],
            "body": {
              "id": 31131,
              "nodeType": "Block",
              "src": "13480:170:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    31105
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 31105,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "13498:6:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 31131,
                      "src": "13490:14:32",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 31104,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13490:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 31107,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 31106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "13507:1:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13490:18:32"
                },
                {
                  "body": {
                    "id": 31127,
                    "nodeType": "Block",
                    "src": "13567:54:32",
                    "statements": [
                      {
                        "expression": {
                          "id": 31125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 31120,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31105,
                            "src": "13581:6:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 31123,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 31109,
                                "src": "13608:1:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 31121,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "13591:4:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_BlockscapeSoloVaultGoerli_$31243",
                                  "typeString": "contract BlockscapeSoloVaultGoerli"
                                }
                              },
                              "id": 31122,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "13596:11:32",
                              "memberName": "totalSupply",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 26356,
                              "src": "13591:16:32",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256) view external returns (uint256)"
                              }
                            },
                            "id": 31124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13591:19:32",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13581:29:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 31126,
                        "nodeType": "ExpressionStatement",
                        "src": "13581:29:32"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 31116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 31112,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31109,
                      "src": "13538:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 31113,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "13543:4:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BlockscapeSoloVaultGoerli_$31243",
                            "typeString": "contract BlockscapeSoloVaultGoerli"
                          }
                        },
                        "id": 31114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "13548:10:32",
                        "memberName": "getTokenID",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 31085,
                        "src": "13543:15:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                          "typeString": "function () view external returns (uint256)"
                        }
                      },
                      "id": 31115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "13543:17:32",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13538:22:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 31128,
                  "initializationExpression": {
                    "assignments": [
                      31109
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 31109,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "13531:1:32",
                        "nodeType": "VariableDeclaration",
                        "scope": 31128,
                        "src": "13523:9:32",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 31108,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13523:7:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 31111,
                    "initialValue": {
                      "hexValue": "31",
                      "id": 31110,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13535:1:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "13523:13:32"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 31118,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "13562:3:32",
                      "subExpression": {
                        "id": 31117,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31109,
                        "src": "13562:1:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 31119,
                    "nodeType": "ExpressionStatement",
                    "src": "13562:3:32"
                  },
                  "nodeType": "ForStatement",
                  "src": "13518:103:32"
                },
                {
                  "expression": {
                    "id": 31129,
                    "name": "amount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 31105,
                    "src": "13637:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 31103,
                  "id": 31130,
                  "nodeType": "Return",
                  "src": "13630:13:32"
                }
              ]
            },
            "documentation": {
              "id": 31099,
              "nodeType": "StructuredDocumentation",
              "src": "13336:84:32",
              "text": "@notice how many staker are there totally\n @return total amount of staker"
            },
            "functionSelector": "18160ddd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "13434:11:32",
            "parameters": {
              "id": 31100,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13445:2:32"
            },
            "returnParameters": {
              "id": 31103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31102,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31132,
                  "src": "13471:7:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31101,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13471:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13470:9:32"
            },
            "scope": 31243,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 31141,
            "nodeType": "FunctionDefinition",
            "src": "13846:182:32",
            "nodes": [],
            "body": {
              "id": 31140,
              "nodeType": "Block",
              "src": "13907:121:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "hexValue": "68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f697066732f516d5052446a5367336964785445384254533337756d446d545a324c5a62337833344c5642514d79616a396e5679",
                    "id": 31138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "13936:85:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1dd3ea697a5734e4ff2d1582408b6c7e2dcba446bcf2d0168d2532ffdd5cb23b",
                      "typeString": "literal_string \"https://ipfs.blockscape.network/ipfs/QmPRDjSg3idxTE8BTS37umDmTZ2LZb3x34LVBQMyaj9nVy\""
                    },
                    "value": "https://ipfs.blockscape.network/ipfs/QmPRDjSg3idxTE8BTS37umDmTZ2LZb3x34LVBQMyaj9nVy"
                  },
                  "functionReturnParameters": 31137,
                  "id": 31139,
                  "nodeType": "Return",
                  "src": "13917:104:32"
                }
              ]
            },
            "documentation": {
              "id": 31133,
              "nodeType": "StructuredDocumentation",
              "src": "13656:185:32",
              "text": "@notice stake nft metdata location\n@dev this path will never change as the contract defines a collection\n@return the fixed collection metadata path "
            },
            "functionSelector": "e8a3d485",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "contractURI",
            "nameLocation": "13855:11:32",
            "parameters": {
              "id": 31134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13866:2:32"
            },
            "returnParameters": {
              "id": 31137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31136,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31141,
                  "src": "13892:13:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 31135,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13892:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13891:15:32"
            },
            "scope": 31243,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 31162,
            "nodeType": "FunctionDefinition",
            "src": "14168:364:32",
            "nodes": [],
            "body": {
              "id": 31161,
              "nodeType": "Block",
              "src": "14280:252:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "68747470733a2f2f697066732e626c6f636b73636170652e6e6574776f726b2f69706e732f6b3531717a6935757175356469766b6661327678753269373179686a336b36726d36626776676e64347130306834663830636234696d736739757932396c2f",
                        "id": 31153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14340:102:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dd58a03101480676c5c6bdb1f029010494337c0d3d158e96f5db992541623a42",
                          "typeString": "literal_string \"https://ipfs.blockscape.network/ipns/k51qzi5uqu5divkfa2vxu2i71yhj3k6rm6bgvgnd4q00h4f80cb4imsg9uy29l/\""
                        },
                        "value": "https://ipfs.blockscape.network/ipns/k51qzi5uqu5divkfa2vxu2i71yhj3k6rm6bgvgnd4q00h4f80cb4imsg9uy29l/"
                      },
                      {
                        "arguments": [
                          {
                            "id": 31156,
                            "name": "_tokenID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31144,
                            "src": "14477:8:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 31154,
                            "name": "Strings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27032,
                            "src": "14460:7:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Strings_$27032_$",
                              "typeString": "type(library Strings)"
                            }
                          },
                          "id": 31155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "14468:8:32",
                          "memberName": "toString",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26915,
                          "src": "14460:16:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 31157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14460:26:32",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "2e6a736f6e",
                        "id": 31158,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14504:7:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                          "typeString": "literal_string \".json\""
                        },
                        "value": ".json"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_dd58a03101480676c5c6bdb1f029010494337c0d3d158e96f5db992541623a42",
                          "typeString": "literal_string \"https://ipfs.blockscape.network/ipns/k51qzi5uqu5divkfa2vxu2i71yhj3k6rm6bgvgnd4q00h4f80cb4imsg9uy29l/\""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                          "typeString": "literal_string \".json\""
                        }
                      ],
                      "expression": {
                        "id": 31151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "14309:6:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 31150,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14309:6:32",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 31152,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "14316:6:32",
                      "memberName": "concat",
                      "nodeType": "MemberAccess",
                      "src": "14309:13:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                        "typeString": "function () pure returns (string memory)"
                      }
                    },
                    "id": 31159,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14309:216:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 31149,
                  "id": 31160,
                  "nodeType": "Return",
                  "src": "14290:235:32"
                }
              ]
            },
            "baseFunctions": [
              25035
            ],
            "documentation": {
              "id": 31142,
              "nodeType": "StructuredDocumentation",
              "src": "14034:129:32",
              "text": "@notice gets the url to the metadata of a given pool\n@param _tokenID the pool\n@return the url"
            },
            "functionSelector": "0e89341c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nameLocation": "14177:3:32",
            "overrides": {
              "id": 31146,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "14235:8:32"
            },
            "parameters": {
              "id": 31145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31144,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "14189:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31162,
                  "src": "14181:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31143,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14181:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14180:18:32"
            },
            "returnParameters": {
              "id": 31149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31148,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31162,
                  "src": "14261:13:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 31147,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14261:6:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14260:15:32"
            },
            "scope": 31243,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 31208,
            "nodeType": "FunctionDefinition",
            "src": "14755:422:32",
            "nodes": [],
            "body": {
              "id": 31207,
              "nodeType": "Block",
              "src": "14860:317:32",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    31172
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 31172,
                      "mutability": "mutable",
                      "name": "metadata",
                      "nameLocation": "14886:8:32",
                      "nodeType": "VariableDeclaration",
                      "scope": 31207,
                      "src": "14870:24:32",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Metadata_$30616_memory_ptr",
                        "typeString": "struct BlockscapeSoloVaultGoerli.Metadata"
                      },
                      "typeName": {
                        "id": 31171,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 31170,
                          "name": "Metadata",
                          "nameLocations": [
                            "14870:8:32"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 30616,
                          "src": "14870:8:32"
                        },
                        "referencedDeclaration": 30616,
                        "src": "14870:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Metadata_$30616_storage_ptr",
                          "typeString": "struct BlockscapeSoloVaultGoerli.Metadata"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 31173,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14870:24:32"
                },
                {
                  "expression": {
                    "id": 31178,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 31174,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31172,
                        "src": "14904:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Metadata_$30616_memory_ptr",
                          "typeString": "struct BlockscapeSoloVaultGoerli.Metadata memory"
                        }
                      },
                      "id": 31176,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "14913:9:32",
                      "memberName": "stakedETH",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30607,
                      "src": "14904:18:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 31177,
                      "name": "_stakedETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31165,
                      "src": "14925:10:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14904:31:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 31179,
                  "nodeType": "ExpressionStatement",
                  "src": "14904:31:32"
                },
                {
                  "expression": {
                    "id": 31184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 31180,
                        "name": "tokenIDtoValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30627,
                        "src": "14993:18:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                          "typeString": "mapping(uint256 => bytes storage ref)"
                        }
                      },
                      "id": 31182,
                      "indexExpression": {
                        "id": 31181,
                        "name": "_tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31167,
                        "src": "15012:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14993:28:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage",
                        "typeString": "bytes storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "",
                      "id": 31183,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "15024:2:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "src": "14993:33:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage",
                      "typeString": "bytes storage ref"
                    }
                  },
                  "id": 31185,
                  "nodeType": "ExpressionStatement",
                  "src": "14993:33:32"
                },
                {
                  "expression": {
                    "id": 31191,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 31186,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31172,
                        "src": "15036:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Metadata_$30616_memory_ptr",
                          "typeString": "struct BlockscapeSoloVaultGoerli.Metadata memory"
                        }
                      },
                      "id": 31188,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "15045:15:32",
                      "memberName": "stakedTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30609,
                      "src": "15036:24:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 31189,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "15063:5:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 31190,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "15069:9:32",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "15063:15:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15036:42:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 31192,
                  "nodeType": "ExpressionStatement",
                  "src": "15036:42:32"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 31194,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "15094:3:32",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 31195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "15098:6:32",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "15094:10:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 31196,
                        "name": "_tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31167,
                        "src": "15106:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 31197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "15116:1:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "",
                        "id": 31198,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "15119:2:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 31193,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25604,
                      "src": "15088:5:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,uint256,bytes memory)"
                      }
                    },
                    "id": 31199,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15088:34:32",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 31200,
                  "nodeType": "ExpressionStatement",
                  "src": "15088:34:32"
                },
                {
                  "expression": {
                    "id": 31205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 31201,
                        "name": "tokenIDtoMetadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30622,
                        "src": "15132:17:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Metadata_$30616_storage_$",
                          "typeString": "mapping(uint256 => struct BlockscapeSoloVaultGoerli.Metadata storage ref)"
                        }
                      },
                      "id": 31203,
                      "indexExpression": {
                        "id": 31202,
                        "name": "_tokenID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31167,
                        "src": "15150:8:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "15132:27:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Metadata_$30616_storage",
                        "typeString": "struct BlockscapeSoloVaultGoerli.Metadata storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 31204,
                      "name": "metadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31172,
                      "src": "15162:8:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Metadata_$30616_memory_ptr",
                        "typeString": "struct BlockscapeSoloVaultGoerli.Metadata memory"
                      }
                    },
                    "src": "15132:38:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Metadata_$30616_storage",
                      "typeString": "struct BlockscapeSoloVaultGoerli.Metadata storage ref"
                    }
                  },
                  "id": 31206,
                  "nodeType": "ExpressionStatement",
                  "src": "15132:38:32"
                }
              ]
            },
            "documentation": {
              "id": 31163,
              "nodeType": "StructuredDocumentation",
              "src": "14565:185:32",
              "text": "@notice creates and mints metadata for a given pool and staker\n@param _stakedETH staked amount from the sender\n@param _tokenID Identifier of the vault"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_metadataSoloVaultInternal",
            "nameLocation": "14764:26:32",
            "parameters": {
              "id": 31168,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31165,
                  "mutability": "mutable",
                  "name": "_stakedETH",
                  "nameLocation": "14808:10:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31208,
                  "src": "14800:18:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31164,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14800:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31167,
                  "mutability": "mutable",
                  "name": "_tokenID",
                  "nameLocation": "14836:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31208,
                  "src": "14828:16:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14828:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14790:60:32"
            },
            "returnParameters": {
              "id": 31169,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14860:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 31214,
            "nodeType": "FunctionDefinition",
            "src": "15258:124:32",
            "nodes": [],
            "body": {
              "id": 31213,
              "nodeType": "Block",
              "src": "15302:80:32",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "15321:55:32",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "allowPubDeposit.slot",
                              "nodeType": "YulIdentifier",
                              "src": "15342:20:32"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "15364:1:32",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "sstore",
                            "nodeType": "YulIdentifier",
                            "src": "15335:6:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15335:31:32"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "15335:31:32"
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 30581,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "15342:20:32",
                      "suffix": "slot",
                      "valueSize": 1
                    }
                  ],
                  "id": 31212,
                  "nodeType": "InlineAssembly",
                  "src": "15312:64:32"
                }
              ]
            },
            "documentation": {
              "id": 31209,
              "nodeType": "StructuredDocumentation",
              "src": "15183:70:32",
              "text": "@notice closes the vault to temporarily prevent further depositing"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_closeSoloVaultInternal",
            "nameLocation": "15267:23:32",
            "parameters": {
              "id": 31210,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15290:2:32"
            },
            "returnParameters": {
              "id": 31211,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15302:0:32"
            },
            "scope": 31243,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 31242,
            "nodeType": "FunctionDefinition",
            "src": "15575:218:32",
            "nodes": [],
            "body": {
              "id": 31241,
              "nodeType": "Block",
              "src": "15687:106:32",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 31238,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "components": [
                                    {
                                      "id": 31227,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 31217,
                                      "src": "15733:1:32",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "id": 31228,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "15732:3:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 31225,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "15715:3:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 31226,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "15719:12:32",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "15715:16:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 31229,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15715:21:32",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 31224,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "15705:9:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 31230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15705:32:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "components": [
                                    {
                                      "id": 31234,
                                      "name": "b",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 31219,
                                      "src": "15781:1:32",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "id": 31235,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "15780:3:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 31232,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "15763:3:32",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 31233,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "15767:12:32",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "15763:16:32",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 31236,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15763:21:32",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 31231,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "15753:9:32",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 31237,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15753:32:32",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "15705:80:32",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 31239,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "15704:82:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 31223,
                  "id": 31240,
                  "nodeType": "Return",
                  "src": "15697:89:32"
                }
              ]
            },
            "documentation": {
              "id": 31215,
              "nodeType": "StructuredDocumentation",
              "src": "15388:182:32",
              "text": "@notice compares two values and checks if there are equal\n@dev hashes the stringified values and compares those hashes\n@return are the bytes equal"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_compareBytes",
            "nameLocation": "15584:13:32",
            "parameters": {
              "id": 31220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31217,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "15611:1:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31242,
                  "src": "15598:14:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 31216,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "15598:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31219,
                  "mutability": "mutable",
                  "name": "b",
                  "nameLocation": "15627:1:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 31242,
                  "src": "15614:14:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 31218,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "15614:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15597:32:32"
            },
            "returnParameters": {
              "id": 31223,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31222,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31242,
                  "src": "15677:4:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 31221,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "15677:4:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15676:6:32"
            },
            "scope": 31243,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 30545,
              "name": "ERC1155Supply",
              "nameLocations": [
                "847:13:32"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26490,
              "src": "847:13:32"
            },
            "id": 30546,
            "nodeType": "InheritanceSpecifier",
            "src": "847:13:32"
          },
          {
            "baseName": {
              "id": 30547,
              "name": "ReentrancyGuard",
              "nameLocations": [
                "862:15:32"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24947,
              "src": "862:15:32"
            },
            "id": 30548,
            "nodeType": "InheritanceSpecifier",
            "src": "862:15:32"
          },
          {
            "baseName": {
              "id": 30549,
              "name": "Ownable",
              "nameLocations": [
                "879:7:32"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24882,
              "src": "879:7:32"
            },
            "id": 30550,
            "nodeType": "InheritanceSpecifier",
            "src": "879:7:32"
          }
        ],
        "canonicalName": "BlockscapeSoloVaultGoerli",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 30544,
          "nodeType": "StructuredDocumentation",
          "src": "507:301:32",
          "text": "@title Rocketpool Staking Allocation Contract\n@author Blockscape Finance AG <info@blockscape.network>\n@notice collects staking, mints NFT in return for staker and let's backend controller \ntransfer the stake when the pool is full (currently 16 ETH) and enough RPL are available"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          31243,
          24882,
          24947,
          26490,
          26170,
          26505,
          26292,
          27056,
          27068,
          26857
        ],
        "name": "BlockscapeSoloVaultGoerli",
        "nameLocation": "818:25:32",
        "scope": 31244,
        "usedErrors": [
          30663,
          30676
        ]
      }
    ],
    "license": "BUSL-1.1"
  },
  "id": 32
}